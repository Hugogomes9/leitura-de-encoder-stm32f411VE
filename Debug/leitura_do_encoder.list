
leitura_do_encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c3c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001dd4  08001dd4  00011dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001df4  08001df4  00011df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001dfc  08001dfc  00011dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001e00  08001e00  00011e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  08001e04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000134  20000004  08001e08  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000138  08001e08  00020138  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000c81a  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000182a  00000000  00000000  0002c84e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000008a0  00000000  00000000  0002e078  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000007f8  00000000  00000000  0002e918  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003b61  00000000  00000000  0002f110  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002dae  00000000  00000000  00032c71  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00035a1f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002368  00000000  00000000  00035a9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001dbc 	.word	0x08001dbc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08001dbc 	.word	0x08001dbc

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b97a 	b.w	80004e4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	468c      	mov	ip, r1
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	9e08      	ldr	r6, [sp, #32]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d151      	bne.n	80002bc <__udivmoddi4+0xb4>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d96d      	bls.n	80002fa <__udivmoddi4+0xf2>
 800021e:	fab2 fe82 	clz	lr, r2
 8000222:	f1be 0f00 	cmp.w	lr, #0
 8000226:	d00b      	beq.n	8000240 <__udivmoddi4+0x38>
 8000228:	f1ce 0c20 	rsb	ip, lr, #32
 800022c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000230:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000234:	fa02 f70e 	lsl.w	r7, r2, lr
 8000238:	ea4c 0c05 	orr.w	ip, ip, r5
 800023c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000240:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000244:	0c25      	lsrs	r5, r4, #16
 8000246:	fbbc f8fa 	udiv	r8, ip, sl
 800024a:	fa1f f987 	uxth.w	r9, r7
 800024e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000252:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000256:	fb08 f309 	mul.w	r3, r8, r9
 800025a:	42ab      	cmp	r3, r5
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x6c>
 800025e:	19ed      	adds	r5, r5, r7
 8000260:	f108 32ff 	add.w	r2, r8, #4294967295
 8000264:	f080 8123 	bcs.w	80004ae <__udivmoddi4+0x2a6>
 8000268:	42ab      	cmp	r3, r5
 800026a:	f240 8120 	bls.w	80004ae <__udivmoddi4+0x2a6>
 800026e:	f1a8 0802 	sub.w	r8, r8, #2
 8000272:	443d      	add	r5, r7
 8000274:	1aed      	subs	r5, r5, r3
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb5 f0fa 	udiv	r0, r5, sl
 800027c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000280:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000284:	fb00 f909 	mul.w	r9, r0, r9
 8000288:	45a1      	cmp	r9, r4
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x98>
 800028c:	19e4      	adds	r4, r4, r7
 800028e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000292:	f080 810a 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 8000296:	45a1      	cmp	r9, r4
 8000298:	f240 8107 	bls.w	80004aa <__udivmoddi4+0x2a2>
 800029c:	3802      	subs	r0, #2
 800029e:	443c      	add	r4, r7
 80002a0:	eba4 0409 	sub.w	r4, r4, r9
 80002a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a8:	2100      	movs	r1, #0
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	d061      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002ae:	fa24 f40e 	lsr.w	r4, r4, lr
 80002b2:	2300      	movs	r3, #0
 80002b4:	6034      	str	r4, [r6, #0]
 80002b6:	6073      	str	r3, [r6, #4]
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	428b      	cmp	r3, r1
 80002be:	d907      	bls.n	80002d0 <__udivmoddi4+0xc8>
 80002c0:	2e00      	cmp	r6, #0
 80002c2:	d054      	beq.n	800036e <__udivmoddi4+0x166>
 80002c4:	2100      	movs	r1, #0
 80002c6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ca:	4608      	mov	r0, r1
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	fab3 f183 	clz	r1, r3
 80002d4:	2900      	cmp	r1, #0
 80002d6:	f040 808e 	bne.w	80003f6 <__udivmoddi4+0x1ee>
 80002da:	42ab      	cmp	r3, r5
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xdc>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80fa 	bhi.w	80004d8 <__udivmoddi4+0x2d0>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb65 0503 	sbc.w	r5, r5, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	46ac      	mov	ip, r5
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d03f      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002f2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	b912      	cbnz	r2, 8000302 <__udivmoddi4+0xfa>
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb7 f7f2 	udiv	r7, r7, r2
 8000302:	fab7 fe87 	clz	lr, r7
 8000306:	f1be 0f00 	cmp.w	lr, #0
 800030a:	d134      	bne.n	8000376 <__udivmoddi4+0x16e>
 800030c:	1beb      	subs	r3, r5, r7
 800030e:	0c3a      	lsrs	r2, r7, #16
 8000310:	fa1f fc87 	uxth.w	ip, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb3 f8f2 	udiv	r8, r3, r2
 800031a:	0c25      	lsrs	r5, r4, #16
 800031c:	fb02 3318 	mls	r3, r2, r8, r3
 8000320:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000324:	fb0c f308 	mul.w	r3, ip, r8
 8000328:	42ab      	cmp	r3, r5
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x134>
 800032c:	19ed      	adds	r5, r5, r7
 800032e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x132>
 8000334:	42ab      	cmp	r3, r5
 8000336:	f200 80d1 	bhi.w	80004dc <__udivmoddi4+0x2d4>
 800033a:	4680      	mov	r8, r0
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb5 f0f2 	udiv	r0, r5, r2
 8000344:	fb02 5510 	mls	r5, r2, r0, r5
 8000348:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800034c:	fb0c fc00 	mul.w	ip, ip, r0
 8000350:	45a4      	cmp	ip, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x15c>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x15a>
 800035c:	45a4      	cmp	ip, r4
 800035e:	f200 80b8 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 040c 	sub.w	r4, r4, ip
 8000368:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800036c:	e79d      	b.n	80002aa <__udivmoddi4+0xa2>
 800036e:	4631      	mov	r1, r6
 8000370:	4630      	mov	r0, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	f1ce 0420 	rsb	r4, lr, #32
 800037a:	fa05 f30e 	lsl.w	r3, r5, lr
 800037e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000382:	fa20 f804 	lsr.w	r8, r0, r4
 8000386:	0c3a      	lsrs	r2, r7, #16
 8000388:	fa25 f404 	lsr.w	r4, r5, r4
 800038c:	ea48 0803 	orr.w	r8, r8, r3
 8000390:	fbb4 f1f2 	udiv	r1, r4, r2
 8000394:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000398:	fb02 4411 	mls	r4, r2, r1, r4
 800039c:	fa1f fc87 	uxth.w	ip, r7
 80003a0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a4:	fb01 f30c 	mul.w	r3, r1, ip
 80003a8:	42ab      	cmp	r3, r5
 80003aa:	fa00 f40e 	lsl.w	r4, r0, lr
 80003ae:	d909      	bls.n	80003c4 <__udivmoddi4+0x1bc>
 80003b0:	19ed      	adds	r5, r5, r7
 80003b2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003b6:	f080 808a 	bcs.w	80004ce <__udivmoddi4+0x2c6>
 80003ba:	42ab      	cmp	r3, r5
 80003bc:	f240 8087 	bls.w	80004ce <__udivmoddi4+0x2c6>
 80003c0:	3902      	subs	r1, #2
 80003c2:	443d      	add	r5, r7
 80003c4:	1aeb      	subs	r3, r5, r3
 80003c6:	fa1f f588 	uxth.w	r5, r8
 80003ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ce:	fb02 3310 	mls	r3, r2, r0, r3
 80003d2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d6:	fb00 f30c 	mul.w	r3, r0, ip
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1e6>
 80003de:	19ed      	adds	r5, r5, r7
 80003e0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003e4:	d26f      	bcs.n	80004c6 <__udivmoddi4+0x2be>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	d96d      	bls.n	80004c6 <__udivmoddi4+0x2be>
 80003ea:	3802      	subs	r0, #2
 80003ec:	443d      	add	r5, r7
 80003ee:	1aeb      	subs	r3, r5, r3
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	e78f      	b.n	8000316 <__udivmoddi4+0x10e>
 80003f6:	f1c1 0720 	rsb	r7, r1, #32
 80003fa:	fa22 f807 	lsr.w	r8, r2, r7
 80003fe:	408b      	lsls	r3, r1
 8000400:	fa05 f401 	lsl.w	r4, r5, r1
 8000404:	ea48 0303 	orr.w	r3, r8, r3
 8000408:	fa20 fe07 	lsr.w	lr, r0, r7
 800040c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000410:	40fd      	lsrs	r5, r7
 8000412:	ea4e 0e04 	orr.w	lr, lr, r4
 8000416:	fbb5 f9fc 	udiv	r9, r5, ip
 800041a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000422:	fa1f f883 	uxth.w	r8, r3
 8000426:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800042a:	fb09 f408 	mul.w	r4, r9, r8
 800042e:	42ac      	cmp	r4, r5
 8000430:	fa02 f201 	lsl.w	r2, r2, r1
 8000434:	fa00 fa01 	lsl.w	sl, r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x244>
 800043a:	18ed      	adds	r5, r5, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	d243      	bcs.n	80004ca <__udivmoddi4+0x2c2>
 8000442:	42ac      	cmp	r4, r5
 8000444:	d941      	bls.n	80004ca <__udivmoddi4+0x2c2>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	441d      	add	r5, r3
 800044c:	1b2d      	subs	r5, r5, r4
 800044e:	fa1f fe8e 	uxth.w	lr, lr
 8000452:	fbb5 f0fc 	udiv	r0, r5, ip
 8000456:	fb0c 5510 	mls	r5, ip, r0, r5
 800045a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45a0      	cmp	r8, r4
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x26e>
 8000466:	18e4      	adds	r4, r4, r3
 8000468:	f100 35ff 	add.w	r5, r0, #4294967295
 800046c:	d229      	bcs.n	80004c2 <__udivmoddi4+0x2ba>
 800046e:	45a0      	cmp	r8, r4
 8000470:	d927      	bls.n	80004c2 <__udivmoddi4+0x2ba>
 8000472:	3802      	subs	r0, #2
 8000474:	441c      	add	r4, r3
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba4 0408 	sub.w	r4, r4, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454c      	cmp	r4, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	464d      	mov	r5, r9
 8000488:	d315      	bcc.n	80004b6 <__udivmoddi4+0x2ae>
 800048a:	d012      	beq.n	80004b2 <__udivmoddi4+0x2aa>
 800048c:	b156      	cbz	r6, 80004a4 <__udivmoddi4+0x29c>
 800048e:	ebba 030e 	subs.w	r3, sl, lr
 8000492:	eb64 0405 	sbc.w	r4, r4, r5
 8000496:	fa04 f707 	lsl.w	r7, r4, r7
 800049a:	40cb      	lsrs	r3, r1
 800049c:	431f      	orrs	r7, r3
 800049e:	40cc      	lsrs	r4, r1
 80004a0:	6037      	str	r7, [r6, #0]
 80004a2:	6074      	str	r4, [r6, #4]
 80004a4:	2100      	movs	r1, #0
 80004a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004aa:	4618      	mov	r0, r3
 80004ac:	e6f8      	b.n	80002a0 <__udivmoddi4+0x98>
 80004ae:	4690      	mov	r8, r2
 80004b0:	e6e0      	b.n	8000274 <__udivmoddi4+0x6c>
 80004b2:	45c2      	cmp	sl, r8
 80004b4:	d2ea      	bcs.n	800048c <__udivmoddi4+0x284>
 80004b6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ba:	eb69 0503 	sbc.w	r5, r9, r3
 80004be:	3801      	subs	r0, #1
 80004c0:	e7e4      	b.n	800048c <__udivmoddi4+0x284>
 80004c2:	4628      	mov	r0, r5
 80004c4:	e7d7      	b.n	8000476 <__udivmoddi4+0x26e>
 80004c6:	4640      	mov	r0, r8
 80004c8:	e791      	b.n	80003ee <__udivmoddi4+0x1e6>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e7be      	b.n	800044c <__udivmoddi4+0x244>
 80004ce:	4601      	mov	r1, r0
 80004d0:	e778      	b.n	80003c4 <__udivmoddi4+0x1bc>
 80004d2:	3802      	subs	r0, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	e745      	b.n	8000364 <__udivmoddi4+0x15c>
 80004d8:	4608      	mov	r0, r1
 80004da:	e708      	b.n	80002ee <__udivmoddi4+0xe6>
 80004dc:	f1a8 0802 	sub.w	r8, r8, #2
 80004e0:	443d      	add	r5, r7
 80004e2:	e72b      	b.n	800033c <__udivmoddi4+0x134>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004ec:	4a0e      	ldr	r2, [pc, #56]	; (8000528 <HAL_Init+0x40>)
 80004ee:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <HAL_Init+0x40>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80004f8:	4a0b      	ldr	r2, [pc, #44]	; (8000528 <HAL_Init+0x40>)
 80004fa:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <HAL_Init+0x40>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000502:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000504:	4a08      	ldr	r2, [pc, #32]	; (8000528 <HAL_Init+0x40>)
 8000506:	4b08      	ldr	r3, [pc, #32]	; (8000528 <HAL_Init+0x40>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800050e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000510:	2003      	movs	r0, #3
 8000512:	f000 f90f 	bl	8000734 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000516:	2000      	movs	r0, #0
 8000518:	f000 f808 	bl	800052c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800051c:	f001 fab2 	bl	8001a84 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000520:	2300      	movs	r3, #0
}
 8000522:	4618      	mov	r0, r3
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40023c00 	.word	0x40023c00

0800052c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000534:	4b09      	ldr	r3, [pc, #36]	; (800055c <HAL_InitTick+0x30>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a09      	ldr	r2, [pc, #36]	; (8000560 <HAL_InitTick+0x34>)
 800053a:	fba2 2303 	umull	r2, r3, r2, r3
 800053e:	099b      	lsrs	r3, r3, #6
 8000540:	4618      	mov	r0, r3
 8000542:	f000 f91e 	bl	8000782 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000546:	2200      	movs	r2, #0
 8000548:	6879      	ldr	r1, [r7, #4]
 800054a:	f04f 30ff 	mov.w	r0, #4294967295
 800054e:	f000 f8fc 	bl	800074a <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 8000552:	2300      	movs	r3, #0
}
 8000554:	4618      	mov	r0, r3
 8000556:	3708      	adds	r7, #8
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	20000000 	.word	0x20000000
 8000560:	10624dd3 	.word	0x10624dd3

08000564 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  uwTick++;
 8000568:	4b04      	ldr	r3, [pc, #16]	; (800057c <HAL_IncTick+0x18>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	3301      	adds	r3, #1
 800056e:	4a03      	ldr	r2, [pc, #12]	; (800057c <HAL_IncTick+0x18>)
 8000570:	6013      	str	r3, [r2, #0]
}
 8000572:	bf00      	nop
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	20000020 	.word	0x20000020

08000580 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  return uwTick;
 8000584:	4b03      	ldr	r3, [pc, #12]	; (8000594 <HAL_GetTick+0x14>)
 8000586:	681b      	ldr	r3, [r3, #0]
}
 8000588:	4618      	mov	r0, r3
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	20000020 	.word	0x20000020

08000598 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005a0:	f7ff ffee 	bl	8000580 <HAL_GetTick>
 80005a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005b0:	d002      	beq.n	80005b8 <HAL_Delay+0x20>
  {
     wait++;
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	3301      	adds	r3, #1
 80005b6:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80005b8:	bf00      	nop
 80005ba:	f7ff ffe1 	bl	8000580 <HAL_GetTick>
 80005be:	4602      	mov	r2, r0
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	1ad2      	subs	r2, r2, r3
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	d3f7      	bcc.n	80005ba <HAL_Delay+0x22>
  {
  }
}
 80005ca:	bf00      	nop
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	f003 0307 	and.w	r3, r3, #7
 80005e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005e4:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <NVIC_SetPriorityGrouping+0x44>)
 80005e6:	68db      	ldr	r3, [r3, #12]
 80005e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005ea:	68ba      	ldr	r2, [r7, #8]
 80005ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005f0:	4013      	ands	r3, r2
 80005f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000606:	4a04      	ldr	r2, [pc, #16]	; (8000618 <NVIC_SetPriorityGrouping+0x44>)
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	60d3      	str	r3, [r2, #12]
}
 800060c:	bf00      	nop
 800060e:	3714      	adds	r7, #20
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	e000ed00 	.word	0xe000ed00

0800061c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000620:	4b04      	ldr	r3, [pc, #16]	; (8000634 <NVIC_GetPriorityGrouping+0x18>)
 8000622:	68db      	ldr	r3, [r3, #12]
 8000624:	0a1b      	lsrs	r3, r3, #8
 8000626:	f003 0307 	and.w	r3, r3, #7
}
 800062a:	4618      	mov	r0, r3
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	6039      	str	r1, [r7, #0]
 8000642:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000648:	2b00      	cmp	r3, #0
 800064a:	da0b      	bge.n	8000664 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064c:	490d      	ldr	r1, [pc, #52]	; (8000684 <NVIC_SetPriority+0x4c>)
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	f003 030f 	and.w	r3, r3, #15
 8000654:	3b04      	subs	r3, #4
 8000656:	683a      	ldr	r2, [r7, #0]
 8000658:	b2d2      	uxtb	r2, r2
 800065a:	0112      	lsls	r2, r2, #4
 800065c:	b2d2      	uxtb	r2, r2
 800065e:	440b      	add	r3, r1
 8000660:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000662:	e009      	b.n	8000678 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000664:	4908      	ldr	r1, [pc, #32]	; (8000688 <NVIC_SetPriority+0x50>)
 8000666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066a:	683a      	ldr	r2, [r7, #0]
 800066c:	b2d2      	uxtb	r2, r2
 800066e:	0112      	lsls	r2, r2, #4
 8000670:	b2d2      	uxtb	r2, r2
 8000672:	440b      	add	r3, r1
 8000674:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	e000ed00 	.word	0xe000ed00
 8000688:	e000e100 	.word	0xe000e100

0800068c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800068c:	b480      	push	{r7}
 800068e:	b089      	sub	sp, #36	; 0x24
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	f003 0307 	and.w	r3, r3, #7
 800069e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006a0:	69fb      	ldr	r3, [r7, #28]
 80006a2:	f1c3 0307 	rsb	r3, r3, #7
 80006a6:	2b04      	cmp	r3, #4
 80006a8:	bf28      	it	cs
 80006aa:	2304      	movcs	r3, #4
 80006ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ae:	69fb      	ldr	r3, [r7, #28]
 80006b0:	3304      	adds	r3, #4
 80006b2:	2b06      	cmp	r3, #6
 80006b4:	d902      	bls.n	80006bc <NVIC_EncodePriority+0x30>
 80006b6:	69fb      	ldr	r3, [r7, #28]
 80006b8:	3b03      	subs	r3, #3
 80006ba:	e000      	b.n	80006be <NVIC_EncodePriority+0x32>
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c0:	2201      	movs	r2, #1
 80006c2:	69bb      	ldr	r3, [r7, #24]
 80006c4:	fa02 f303 	lsl.w	r3, r2, r3
 80006c8:	1e5a      	subs	r2, r3, #1
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	401a      	ands	r2, r3
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006d2:	2101      	movs	r1, #1
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	fa01 f303 	lsl.w	r3, r1, r3
 80006da:	1e59      	subs	r1, r3, #1
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e0:	4313      	orrs	r3, r2
         );
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3724      	adds	r7, #36	; 0x24
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
	...

080006f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	3b01      	subs	r3, #1
 80006fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000700:	d301      	bcc.n	8000706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000702:	2301      	movs	r3, #1
 8000704:	e00f      	b.n	8000726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000706:	4a0a      	ldr	r2, [pc, #40]	; (8000730 <SysTick_Config+0x40>)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	3b01      	subs	r3, #1
 800070c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800070e:	210f      	movs	r1, #15
 8000710:	f04f 30ff 	mov.w	r0, #4294967295
 8000714:	f7ff ff90 	bl	8000638 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000718:	4b05      	ldr	r3, [pc, #20]	; (8000730 <SysTick_Config+0x40>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800071e:	4b04      	ldr	r3, [pc, #16]	; (8000730 <SysTick_Config+0x40>)
 8000720:	2207      	movs	r2, #7
 8000722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000724:	2300      	movs	r3, #0
}
 8000726:	4618      	mov	r0, r3
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	e000e010 	.word	0xe000e010

08000734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f7ff ff49 	bl	80005d4 <NVIC_SetPriorityGrouping>
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}

0800074a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800074a:	b580      	push	{r7, lr}
 800074c:	b086      	sub	sp, #24
 800074e:	af00      	add	r7, sp, #0
 8000750:	4603      	mov	r3, r0
 8000752:	60b9      	str	r1, [r7, #8]
 8000754:	607a      	str	r2, [r7, #4]
 8000756:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800075c:	f7ff ff5e 	bl	800061c <NVIC_GetPriorityGrouping>
 8000760:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000762:	687a      	ldr	r2, [r7, #4]
 8000764:	68b9      	ldr	r1, [r7, #8]
 8000766:	6978      	ldr	r0, [r7, #20]
 8000768:	f7ff ff90 	bl	800068c <NVIC_EncodePriority>
 800076c:	4602      	mov	r2, r0
 800076e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000772:	4611      	mov	r1, r2
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff ff5f 	bl	8000638 <NVIC_SetPriority>
}
 800077a:	bf00      	nop
 800077c:	3718      	adds	r7, #24
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	b082      	sub	sp, #8
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f7ff ffb0 	bl	80006f0 <SysTick_Config>
 8000790:	4603      	mov	r3, r0
}
 8000792:	4618      	mov	r0, r3
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
	...

0800079c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2b04      	cmp	r3, #4
 80007a8:	d106      	bne.n	80007b8 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80007aa:	4a09      	ldr	r2, [pc, #36]	; (80007d0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80007ac:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f043 0304 	orr.w	r3, r3, #4
 80007b4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80007b6:	e005      	b.n	80007c4 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80007b8:	4a05      	ldr	r2, [pc, #20]	; (80007d0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80007ba:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f023 0304 	bic.w	r3, r3, #4
 80007c2:	6013      	str	r3, [r2, #0]
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	e000e010 	.word	0xe000e010

080007d4 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80007d8:	f000 f802 	bl	80007e0 <HAL_SYSTICK_Callback>
}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}

080007e0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
	...

080007f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b089      	sub	sp, #36	; 0x24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000802:	2300      	movs	r3, #0
 8000804:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
 800080a:	e159      	b.n	8000ac0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800080c:	2201      	movs	r2, #1
 800080e:	69fb      	ldr	r3, [r7, #28]
 8000810:	fa02 f303 	lsl.w	r3, r2, r3
 8000814:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	4013      	ands	r3, r2
 800081e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000820:	693a      	ldr	r2, [r7, #16]
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	429a      	cmp	r2, r3
 8000826:	f040 8148 	bne.w	8000aba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	2b02      	cmp	r3, #2
 8000830:	d003      	beq.n	800083a <HAL_GPIO_Init+0x4a>
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	2b12      	cmp	r3, #18
 8000838:	d123      	bne.n	8000882 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800083a:	69fb      	ldr	r3, [r7, #28]
 800083c:	08da      	lsrs	r2, r3, #3
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	3208      	adds	r2, #8
 8000842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000846:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000848:	69fb      	ldr	r3, [r7, #28]
 800084a:	f003 0307 	and.w	r3, r3, #7
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	220f      	movs	r2, #15
 8000852:	fa02 f303 	lsl.w	r3, r2, r3
 8000856:	43db      	mvns	r3, r3
 8000858:	69ba      	ldr	r2, [r7, #24]
 800085a:	4013      	ands	r3, r2
 800085c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	691a      	ldr	r2, [r3, #16]
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	f003 0307 	and.w	r3, r3, #7
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	fa02 f303 	lsl.w	r3, r2, r3
 800086e:	69ba      	ldr	r2, [r7, #24]
 8000870:	4313      	orrs	r3, r2
 8000872:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000874:	69fb      	ldr	r3, [r7, #28]
 8000876:	08da      	lsrs	r2, r3, #3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	3208      	adds	r2, #8
 800087c:	69b9      	ldr	r1, [r7, #24]
 800087e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000888:	69fb      	ldr	r3, [r7, #28]
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	2203      	movs	r2, #3
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	43db      	mvns	r3, r3
 8000894:	69ba      	ldr	r2, [r7, #24]
 8000896:	4013      	ands	r3, r2
 8000898:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	f003 0203 	and.w	r2, r3, #3
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	fa02 f303 	lsl.w	r3, r2, r3
 80008aa:	69ba      	ldr	r2, [r7, #24]
 80008ac:	4313      	orrs	r3, r2
 80008ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	69ba      	ldr	r2, [r7, #24]
 80008b4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d00b      	beq.n	80008d6 <HAL_GPIO_Init+0xe6>
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	2b02      	cmp	r3, #2
 80008c4:	d007      	beq.n	80008d6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008ca:	2b11      	cmp	r3, #17
 80008cc:	d003      	beq.n	80008d6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	2b12      	cmp	r3, #18
 80008d4:	d130      	bne.n	8000938 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	689b      	ldr	r3, [r3, #8]
 80008da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	2203      	movs	r2, #3
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	43db      	mvns	r3, r3
 80008e8:	69ba      	ldr	r2, [r7, #24]
 80008ea:	4013      	ands	r3, r2
 80008ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	68da      	ldr	r2, [r3, #12]
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	fa02 f303 	lsl.w	r3, r2, r3
 80008fa:	69ba      	ldr	r2, [r7, #24]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	69ba      	ldr	r2, [r7, #24]
 8000904:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800090c:	2201      	movs	r2, #1
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	fa02 f303 	lsl.w	r3, r2, r3
 8000914:	43db      	mvns	r3, r3
 8000916:	69ba      	ldr	r2, [r7, #24]
 8000918:	4013      	ands	r3, r2
 800091a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	091b      	lsrs	r3, r3, #4
 8000922:	f003 0201 	and.w	r2, r3, #1
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	fa02 f303 	lsl.w	r3, r2, r3
 800092c:	69ba      	ldr	r2, [r7, #24]
 800092e:	4313      	orrs	r3, r2
 8000930:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	69ba      	ldr	r2, [r7, #24]
 8000936:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	2203      	movs	r2, #3
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	43db      	mvns	r3, r3
 800094a:	69ba      	ldr	r2, [r7, #24]
 800094c:	4013      	ands	r3, r2
 800094e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	689a      	ldr	r2, [r3, #8]
 8000954:	69fb      	ldr	r3, [r7, #28]
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	fa02 f303 	lsl.w	r3, r2, r3
 800095c:	69ba      	ldr	r2, [r7, #24]
 800095e:	4313      	orrs	r3, r2
 8000960:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	69ba      	ldr	r2, [r7, #24]
 8000966:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000970:	2b00      	cmp	r3, #0
 8000972:	f000 80a2 	beq.w	8000aba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	4a56      	ldr	r2, [pc, #344]	; (8000ad4 <HAL_GPIO_Init+0x2e4>)
 800097c:	4b55      	ldr	r3, [pc, #340]	; (8000ad4 <HAL_GPIO_Init+0x2e4>)
 800097e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000984:	6453      	str	r3, [r2, #68]	; 0x44
 8000986:	4b53      	ldr	r3, [pc, #332]	; (8000ad4 <HAL_GPIO_Init+0x2e4>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000992:	4a51      	ldr	r2, [pc, #324]	; (8000ad8 <HAL_GPIO_Init+0x2e8>)
 8000994:	69fb      	ldr	r3, [r7, #28]
 8000996:	089b      	lsrs	r3, r3, #2
 8000998:	3302      	adds	r3, #2
 800099a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800099e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009a0:	69fb      	ldr	r3, [r7, #28]
 80009a2:	f003 0303 	and.w	r3, r3, #3
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	220f      	movs	r2, #15
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	43db      	mvns	r3, r3
 80009b0:	69ba      	ldr	r2, [r7, #24]
 80009b2:	4013      	ands	r3, r2
 80009b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4a48      	ldr	r2, [pc, #288]	; (8000adc <HAL_GPIO_Init+0x2ec>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d019      	beq.n	80009f2 <HAL_GPIO_Init+0x202>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a47      	ldr	r2, [pc, #284]	; (8000ae0 <HAL_GPIO_Init+0x2f0>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d013      	beq.n	80009ee <HAL_GPIO_Init+0x1fe>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4a46      	ldr	r2, [pc, #280]	; (8000ae4 <HAL_GPIO_Init+0x2f4>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d00d      	beq.n	80009ea <HAL_GPIO_Init+0x1fa>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a45      	ldr	r2, [pc, #276]	; (8000ae8 <HAL_GPIO_Init+0x2f8>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d007      	beq.n	80009e6 <HAL_GPIO_Init+0x1f6>
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a44      	ldr	r2, [pc, #272]	; (8000aec <HAL_GPIO_Init+0x2fc>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d101      	bne.n	80009e2 <HAL_GPIO_Init+0x1f2>
 80009de:	2304      	movs	r3, #4
 80009e0:	e008      	b.n	80009f4 <HAL_GPIO_Init+0x204>
 80009e2:	2307      	movs	r3, #7
 80009e4:	e006      	b.n	80009f4 <HAL_GPIO_Init+0x204>
 80009e6:	2303      	movs	r3, #3
 80009e8:	e004      	b.n	80009f4 <HAL_GPIO_Init+0x204>
 80009ea:	2302      	movs	r3, #2
 80009ec:	e002      	b.n	80009f4 <HAL_GPIO_Init+0x204>
 80009ee:	2301      	movs	r3, #1
 80009f0:	e000      	b.n	80009f4 <HAL_GPIO_Init+0x204>
 80009f2:	2300      	movs	r3, #0
 80009f4:	69fa      	ldr	r2, [r7, #28]
 80009f6:	f002 0203 	and.w	r2, r2, #3
 80009fa:	0092      	lsls	r2, r2, #2
 80009fc:	4093      	lsls	r3, r2
 80009fe:	69ba      	ldr	r2, [r7, #24]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a04:	4934      	ldr	r1, [pc, #208]	; (8000ad8 <HAL_GPIO_Init+0x2e8>)
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	089b      	lsrs	r3, r3, #2
 8000a0a:	3302      	adds	r3, #2
 8000a0c:	69ba      	ldr	r2, [r7, #24]
 8000a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a12:	4b37      	ldr	r3, [pc, #220]	; (8000af0 <HAL_GPIO_Init+0x300>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	43db      	mvns	r3, r3
 8000a1c:	69ba      	ldr	r2, [r7, #24]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d003      	beq.n	8000a36 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000a2e:	69ba      	ldr	r2, [r7, #24]
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	4313      	orrs	r3, r2
 8000a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a36:	4a2e      	ldr	r2, [pc, #184]	; (8000af0 <HAL_GPIO_Init+0x300>)
 8000a38:	69bb      	ldr	r3, [r7, #24]
 8000a3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a3c:	4b2c      	ldr	r3, [pc, #176]	; (8000af0 <HAL_GPIO_Init+0x300>)
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a42:	693b      	ldr	r3, [r7, #16]
 8000a44:	43db      	mvns	r3, r3
 8000a46:	69ba      	ldr	r2, [r7, #24]
 8000a48:	4013      	ands	r3, r2
 8000a4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d003      	beq.n	8000a60 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000a58:	69ba      	ldr	r2, [r7, #24]
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a60:	4a23      	ldr	r2, [pc, #140]	; (8000af0 <HAL_GPIO_Init+0x300>)
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a66:	4b22      	ldr	r3, [pc, #136]	; (8000af0 <HAL_GPIO_Init+0x300>)
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a6c:	693b      	ldr	r3, [r7, #16]
 8000a6e:	43db      	mvns	r3, r3
 8000a70:	69ba      	ldr	r2, [r7, #24]
 8000a72:	4013      	ands	r3, r2
 8000a74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d003      	beq.n	8000a8a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000a82:	69ba      	ldr	r2, [r7, #24]
 8000a84:	693b      	ldr	r3, [r7, #16]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a8a:	4a19      	ldr	r2, [pc, #100]	; (8000af0 <HAL_GPIO_Init+0x300>)
 8000a8c:	69bb      	ldr	r3, [r7, #24]
 8000a8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a90:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <HAL_GPIO_Init+0x300>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a96:	693b      	ldr	r3, [r7, #16]
 8000a98:	43db      	mvns	r3, r3
 8000a9a:	69ba      	ldr	r2, [r7, #24]
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d003      	beq.n	8000ab4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000aac:	69ba      	ldr	r2, [r7, #24]
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ab4:	4a0e      	ldr	r2, [pc, #56]	; (8000af0 <HAL_GPIO_Init+0x300>)
 8000ab6:	69bb      	ldr	r3, [r7, #24]
 8000ab8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	3301      	adds	r3, #1
 8000abe:	61fb      	str	r3, [r7, #28]
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	2b0f      	cmp	r3, #15
 8000ac4:	f67f aea2 	bls.w	800080c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ac8:	bf00      	nop
 8000aca:	3724      	adds	r7, #36	; 0x24
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40013800 	.word	0x40013800
 8000adc:	40020000 	.word	0x40020000
 8000ae0:	40020400 	.word	0x40020400
 8000ae4:	40020800 	.word	0x40020800
 8000ae8:	40020c00 	.word	0x40020c00
 8000aec:	40021000 	.word	0x40021000
 8000af0:	40013c00 	.word	0x40013c00

08000af4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d101      	bne.n	8000b06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	e213      	b.n	8000f2e <HAL_RCC_OscConfig+0x43a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d075      	beq.n	8000bfe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b12:	4b9f      	ldr	r3, [pc, #636]	; (8000d90 <HAL_RCC_OscConfig+0x29c>)
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	f003 030c 	and.w	r3, r3, #12
 8000b1a:	2b04      	cmp	r3, #4
 8000b1c:	d00c      	beq.n	8000b38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b1e:	4b9c      	ldr	r3, [pc, #624]	; (8000d90 <HAL_RCC_OscConfig+0x29c>)
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b26:	2b08      	cmp	r3, #8
 8000b28:	d112      	bne.n	8000b50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b2a:	4b99      	ldr	r3, [pc, #612]	; (8000d90 <HAL_RCC_OscConfig+0x29c>)
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b36:	d10b      	bne.n	8000b50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b38:	4b95      	ldr	r3, [pc, #596]	; (8000d90 <HAL_RCC_OscConfig+0x29c>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d05b      	beq.n	8000bfc <HAL_RCC_OscConfig+0x108>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d157      	bne.n	8000bfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	e1ee      	b.n	8000f2e <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b58:	d106      	bne.n	8000b68 <HAL_RCC_OscConfig+0x74>
 8000b5a:	4a8d      	ldr	r2, [pc, #564]	; (8000d90 <HAL_RCC_OscConfig+0x29c>)
 8000b5c:	4b8c      	ldr	r3, [pc, #560]	; (8000d90 <HAL_RCC_OscConfig+0x29c>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b64:	6013      	str	r3, [r2, #0]
 8000b66:	e01d      	b.n	8000ba4 <HAL_RCC_OscConfig+0xb0>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b70:	d10c      	bne.n	8000b8c <HAL_RCC_OscConfig+0x98>
 8000b72:	4a87      	ldr	r2, [pc, #540]	; (8000d90 <HAL_RCC_OscConfig+0x29c>)
 8000b74:	4b86      	ldr	r3, [pc, #536]	; (8000d90 <HAL_RCC_OscConfig+0x29c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b7c:	6013      	str	r3, [r2, #0]
 8000b7e:	4a84      	ldr	r2, [pc, #528]	; (8000d90 <HAL_RCC_OscConfig+0x29c>)
 8000b80:	4b83      	ldr	r3, [pc, #524]	; (8000d90 <HAL_RCC_OscConfig+0x29c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b88:	6013      	str	r3, [r2, #0]
 8000b8a:	e00b      	b.n	8000ba4 <HAL_RCC_OscConfig+0xb0>
 8000b8c:	4a80      	ldr	r2, [pc, #512]	; (8000d90 <HAL_RCC_OscConfig+0x29c>)
 8000b8e:	4b80      	ldr	r3, [pc, #512]	; (8000d90 <HAL_RCC_OscConfig+0x29c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b96:	6013      	str	r3, [r2, #0]
 8000b98:	4a7d      	ldr	r2, [pc, #500]	; (8000d90 <HAL_RCC_OscConfig+0x29c>)
 8000b9a:	4b7d      	ldr	r3, [pc, #500]	; (8000d90 <HAL_RCC_OscConfig+0x29c>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ba2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d013      	beq.n	8000bd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bac:	f7ff fce8 	bl	8000580 <HAL_GetTick>
 8000bb0:	60f8      	str	r0, [r7, #12]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bb2:	e008      	b.n	8000bc6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bb4:	f7ff fce4 	bl	8000580 <HAL_GetTick>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	2b64      	cmp	r3, #100	; 0x64
 8000bc0:	d901      	bls.n	8000bc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	e1b3      	b.n	8000f2e <HAL_RCC_OscConfig+0x43a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bc6:	4b72      	ldr	r3, [pc, #456]	; (8000d90 <HAL_RCC_OscConfig+0x29c>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d0f0      	beq.n	8000bb4 <HAL_RCC_OscConfig+0xc0>
 8000bd2:	e014      	b.n	8000bfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bd4:	f7ff fcd4 	bl	8000580 <HAL_GetTick>
 8000bd8:	60f8      	str	r0, [r7, #12]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bda:	e008      	b.n	8000bee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bdc:	f7ff fcd0 	bl	8000580 <HAL_GetTick>
 8000be0:	4602      	mov	r2, r0
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	2b64      	cmp	r3, #100	; 0x64
 8000be8:	d901      	bls.n	8000bee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000bea:	2303      	movs	r3, #3
 8000bec:	e19f      	b.n	8000f2e <HAL_RCC_OscConfig+0x43a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bee:	4b68      	ldr	r3, [pc, #416]	; (8000d90 <HAL_RCC_OscConfig+0x29c>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d1f0      	bne.n	8000bdc <HAL_RCC_OscConfig+0xe8>
 8000bfa:	e000      	b.n	8000bfe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d063      	beq.n	8000cd2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c0a:	4b61      	ldr	r3, [pc, #388]	; (8000d90 <HAL_RCC_OscConfig+0x29c>)
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	f003 030c 	and.w	r3, r3, #12
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d00b      	beq.n	8000c2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c16:	4b5e      	ldr	r3, [pc, #376]	; (8000d90 <HAL_RCC_OscConfig+0x29c>)
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c1e:	2b08      	cmp	r3, #8
 8000c20:	d11c      	bne.n	8000c5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c22:	4b5b      	ldr	r3, [pc, #364]	; (8000d90 <HAL_RCC_OscConfig+0x29c>)
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d116      	bne.n	8000c5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c2e:	4b58      	ldr	r3, [pc, #352]	; (8000d90 <HAL_RCC_OscConfig+0x29c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d005      	beq.n	8000c46 <HAL_RCC_OscConfig+0x152>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d001      	beq.n	8000c46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e173      	b.n	8000f2e <HAL_RCC_OscConfig+0x43a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c46:	4952      	ldr	r1, [pc, #328]	; (8000d90 <HAL_RCC_OscConfig+0x29c>)
 8000c48:	4b51      	ldr	r3, [pc, #324]	; (8000d90 <HAL_RCC_OscConfig+0x29c>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	691b      	ldr	r3, [r3, #16]
 8000c54:	00db      	lsls	r3, r3, #3
 8000c56:	4313      	orrs	r3, r2
 8000c58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c5a:	e03a      	b.n	8000cd2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d020      	beq.n	8000ca6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c64:	4b4b      	ldr	r3, [pc, #300]	; (8000d94 <HAL_RCC_OscConfig+0x2a0>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c6a:	f7ff fc89 	bl	8000580 <HAL_GetTick>
 8000c6e:	60f8      	str	r0, [r7, #12]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c70:	e008      	b.n	8000c84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c72:	f7ff fc85 	bl	8000580 <HAL_GetTick>
 8000c76:	4602      	mov	r2, r0
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	1ad3      	subs	r3, r2, r3
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d901      	bls.n	8000c84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000c80:	2303      	movs	r3, #3
 8000c82:	e154      	b.n	8000f2e <HAL_RCC_OscConfig+0x43a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c84:	4b42      	ldr	r3, [pc, #264]	; (8000d90 <HAL_RCC_OscConfig+0x29c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f003 0302 	and.w	r3, r3, #2
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d0f0      	beq.n	8000c72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c90:	493f      	ldr	r1, [pc, #252]	; (8000d90 <HAL_RCC_OscConfig+0x29c>)
 8000c92:	4b3f      	ldr	r3, [pc, #252]	; (8000d90 <HAL_RCC_OscConfig+0x29c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	691b      	ldr	r3, [r3, #16]
 8000c9e:	00db      	lsls	r3, r3, #3
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	600b      	str	r3, [r1, #0]
 8000ca4:	e015      	b.n	8000cd2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ca6:	4b3b      	ldr	r3, [pc, #236]	; (8000d94 <HAL_RCC_OscConfig+0x2a0>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cac:	f7ff fc68 	bl	8000580 <HAL_GetTick>
 8000cb0:	60f8      	str	r0, [r7, #12]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cb2:	e008      	b.n	8000cc6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cb4:	f7ff fc64 	bl	8000580 <HAL_GetTick>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	2b02      	cmp	r3, #2
 8000cc0:	d901      	bls.n	8000cc6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	e133      	b.n	8000f2e <HAL_RCC_OscConfig+0x43a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cc6:	4b32      	ldr	r3, [pc, #200]	; (8000d90 <HAL_RCC_OscConfig+0x29c>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f003 0302 	and.w	r3, r3, #2
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d1f0      	bne.n	8000cb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f003 0308 	and.w	r3, r3, #8
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d030      	beq.n	8000d40 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	695b      	ldr	r3, [r3, #20]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d016      	beq.n	8000d14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ce6:	4b2c      	ldr	r3, [pc, #176]	; (8000d98 <HAL_RCC_OscConfig+0x2a4>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000cec:	f7ff fc48 	bl	8000580 <HAL_GetTick>
 8000cf0:	60f8      	str	r0, [r7, #12]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cf2:	e008      	b.n	8000d06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cf4:	f7ff fc44 	bl	8000580 <HAL_GetTick>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d901      	bls.n	8000d06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000d02:	2303      	movs	r3, #3
 8000d04:	e113      	b.n	8000f2e <HAL_RCC_OscConfig+0x43a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d06:	4b22      	ldr	r3, [pc, #136]	; (8000d90 <HAL_RCC_OscConfig+0x29c>)
 8000d08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d0f0      	beq.n	8000cf4 <HAL_RCC_OscConfig+0x200>
 8000d12:	e015      	b.n	8000d40 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d14:	4b20      	ldr	r3, [pc, #128]	; (8000d98 <HAL_RCC_OscConfig+0x2a4>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d1a:	f7ff fc31 	bl	8000580 <HAL_GetTick>
 8000d1e:	60f8      	str	r0, [r7, #12]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d20:	e008      	b.n	8000d34 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d22:	f7ff fc2d 	bl	8000580 <HAL_GetTick>
 8000d26:	4602      	mov	r2, r0
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	1ad3      	subs	r3, r2, r3
 8000d2c:	2b02      	cmp	r3, #2
 8000d2e:	d901      	bls.n	8000d34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000d30:	2303      	movs	r3, #3
 8000d32:	e0fc      	b.n	8000f2e <HAL_RCC_OscConfig+0x43a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d34:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <HAL_RCC_OscConfig+0x29c>)
 8000d36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d38:	f003 0302 	and.w	r3, r3, #2
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d1f0      	bne.n	8000d22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f003 0304 	and.w	r3, r3, #4
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	f000 8086 	beq.w	8000e5a <HAL_RCC_OscConfig+0x366>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	4a0f      	ldr	r2, [pc, #60]	; (8000d90 <HAL_RCC_OscConfig+0x29c>)
 8000d54:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <HAL_RCC_OscConfig+0x29c>)
 8000d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <HAL_RCC_OscConfig+0x29c>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d66:	60bb      	str	r3, [r7, #8]
 8000d68:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000d6a:	4a0c      	ldr	r2, [pc, #48]	; (8000d9c <HAL_RCC_OscConfig+0x2a8>)
 8000d6c:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <HAL_RCC_OscConfig+0x2a8>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8000d76:	f7ff fc03 	bl	8000580 <HAL_GetTick>
 8000d7a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000d7c:	e010      	b.n	8000da0 <HAL_RCC_OscConfig+0x2ac>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000d7e:	f7ff fbff 	bl	8000580 <HAL_GetTick>
 8000d82:	4602      	mov	r2, r0
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d909      	bls.n	8000da0 <HAL_RCC_OscConfig+0x2ac>
      {
        return HAL_TIMEOUT;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	e0ce      	b.n	8000f2e <HAL_RCC_OscConfig+0x43a>
 8000d90:	40023800 	.word	0x40023800
 8000d94:	42470000 	.word	0x42470000
 8000d98:	42470e80 	.word	0x42470e80
 8000d9c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000da0:	4b65      	ldr	r3, [pc, #404]	; (8000f38 <HAL_RCC_OscConfig+0x444>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d0e8      	beq.n	8000d7e <HAL_RCC_OscConfig+0x28a>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	689b      	ldr	r3, [r3, #8]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d106      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x2ce>
 8000db4:	4a61      	ldr	r2, [pc, #388]	; (8000f3c <HAL_RCC_OscConfig+0x448>)
 8000db6:	4b61      	ldr	r3, [pc, #388]	; (8000f3c <HAL_RCC_OscConfig+0x448>)
 8000db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dba:	f043 0301 	orr.w	r3, r3, #1
 8000dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8000dc0:	e01c      	b.n	8000dfc <HAL_RCC_OscConfig+0x308>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	2b05      	cmp	r3, #5
 8000dc8:	d10c      	bne.n	8000de4 <HAL_RCC_OscConfig+0x2f0>
 8000dca:	4a5c      	ldr	r2, [pc, #368]	; (8000f3c <HAL_RCC_OscConfig+0x448>)
 8000dcc:	4b5b      	ldr	r3, [pc, #364]	; (8000f3c <HAL_RCC_OscConfig+0x448>)
 8000dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dd0:	f043 0304 	orr.w	r3, r3, #4
 8000dd4:	6713      	str	r3, [r2, #112]	; 0x70
 8000dd6:	4a59      	ldr	r2, [pc, #356]	; (8000f3c <HAL_RCC_OscConfig+0x448>)
 8000dd8:	4b58      	ldr	r3, [pc, #352]	; (8000f3c <HAL_RCC_OscConfig+0x448>)
 8000dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6713      	str	r3, [r2, #112]	; 0x70
 8000de2:	e00b      	b.n	8000dfc <HAL_RCC_OscConfig+0x308>
 8000de4:	4a55      	ldr	r2, [pc, #340]	; (8000f3c <HAL_RCC_OscConfig+0x448>)
 8000de6:	4b55      	ldr	r3, [pc, #340]	; (8000f3c <HAL_RCC_OscConfig+0x448>)
 8000de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dea:	f023 0301 	bic.w	r3, r3, #1
 8000dee:	6713      	str	r3, [r2, #112]	; 0x70
 8000df0:	4a52      	ldr	r2, [pc, #328]	; (8000f3c <HAL_RCC_OscConfig+0x448>)
 8000df2:	4b52      	ldr	r3, [pc, #328]	; (8000f3c <HAL_RCC_OscConfig+0x448>)
 8000df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000df6:	f023 0304 	bic.w	r3, r3, #4
 8000dfa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d015      	beq.n	8000e30 <HAL_RCC_OscConfig+0x33c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e04:	f7ff fbbc 	bl	8000580 <HAL_GetTick>
 8000e08:	60f8      	str	r0, [r7, #12]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e0a:	e00a      	b.n	8000e22 <HAL_RCC_OscConfig+0x32e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e0c:	f7ff fbb8 	bl	8000580 <HAL_GetTick>
 8000e10:	4602      	mov	r2, r0
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d901      	bls.n	8000e22 <HAL_RCC_OscConfig+0x32e>
        {
          return HAL_TIMEOUT;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	e085      	b.n	8000f2e <HAL_RCC_OscConfig+0x43a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e22:	4b46      	ldr	r3, [pc, #280]	; (8000f3c <HAL_RCC_OscConfig+0x448>)
 8000e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d0ee      	beq.n	8000e0c <HAL_RCC_OscConfig+0x318>
 8000e2e:	e014      	b.n	8000e5a <HAL_RCC_OscConfig+0x366>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e30:	f7ff fba6 	bl	8000580 <HAL_GetTick>
 8000e34:	60f8      	str	r0, [r7, #12]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e36:	e00a      	b.n	8000e4e <HAL_RCC_OscConfig+0x35a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e38:	f7ff fba2 	bl	8000580 <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d901      	bls.n	8000e4e <HAL_RCC_OscConfig+0x35a>
        {
          return HAL_TIMEOUT;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	e06f      	b.n	8000f2e <HAL_RCC_OscConfig+0x43a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e4e:	4b3b      	ldr	r3, [pc, #236]	; (8000f3c <HAL_RCC_OscConfig+0x448>)
 8000e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d1ee      	bne.n	8000e38 <HAL_RCC_OscConfig+0x344>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	699b      	ldr	r3, [r3, #24]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d064      	beq.n	8000f2c <HAL_RCC_OscConfig+0x438>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000e62:	4b36      	ldr	r3, [pc, #216]	; (8000f3c <HAL_RCC_OscConfig+0x448>)
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	f003 030c 	and.w	r3, r3, #12
 8000e6a:	2b08      	cmp	r3, #8
 8000e6c:	d05c      	beq.n	8000f28 <HAL_RCC_OscConfig+0x434>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	699b      	ldr	r3, [r3, #24]
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d141      	bne.n	8000efa <HAL_RCC_OscConfig+0x406>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e76:	4b32      	ldr	r3, [pc, #200]	; (8000f40 <HAL_RCC_OscConfig+0x44c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e7c:	f7ff fb80 	bl	8000580 <HAL_GetTick>
 8000e80:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e82:	e008      	b.n	8000e96 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e84:	f7ff fb7c 	bl	8000580 <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d901      	bls.n	8000e96 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8000e92:	2303      	movs	r3, #3
 8000e94:	e04b      	b.n	8000f2e <HAL_RCC_OscConfig+0x43a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e96:	4b29      	ldr	r3, [pc, #164]	; (8000f3c <HAL_RCC_OscConfig+0x448>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d1f0      	bne.n	8000e84 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ea2:	4926      	ldr	r1, [pc, #152]	; (8000f3c <HAL_RCC_OscConfig+0x448>)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	69da      	ldr	r2, [r3, #28]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6a1b      	ldr	r3, [r3, #32]
 8000eac:	431a      	orrs	r2, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb2:	019b      	lsls	r3, r3, #6
 8000eb4:	431a      	orrs	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eba:	085b      	lsrs	r3, r3, #1
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	041b      	lsls	r3, r3, #16
 8000ec0:	431a      	orrs	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec6:	061b      	lsls	r3, r3, #24
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ecc:	4b1c      	ldr	r3, [pc, #112]	; (8000f40 <HAL_RCC_OscConfig+0x44c>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ed2:	f7ff fb55 	bl	8000580 <HAL_GetTick>
 8000ed6:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ed8:	e008      	b.n	8000eec <HAL_RCC_OscConfig+0x3f8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000eda:	f7ff fb51 	bl	8000580 <HAL_GetTick>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d901      	bls.n	8000eec <HAL_RCC_OscConfig+0x3f8>
          {
            return HAL_TIMEOUT;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	e020      	b.n	8000f2e <HAL_RCC_OscConfig+0x43a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000eec:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <HAL_RCC_OscConfig+0x448>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d0f0      	beq.n	8000eda <HAL_RCC_OscConfig+0x3e6>
 8000ef8:	e018      	b.n	8000f2c <HAL_RCC_OscConfig+0x438>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000efa:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <HAL_RCC_OscConfig+0x44c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f00:	f7ff fb3e 	bl	8000580 <HAL_GetTick>
 8000f04:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f06:	e008      	b.n	8000f1a <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f08:	f7ff fb3a 	bl	8000580 <HAL_GetTick>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d901      	bls.n	8000f1a <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8000f16:	2303      	movs	r3, #3
 8000f18:	e009      	b.n	8000f2e <HAL_RCC_OscConfig+0x43a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f1a:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <HAL_RCC_OscConfig+0x448>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d1f0      	bne.n	8000f08 <HAL_RCC_OscConfig+0x414>
 8000f26:	e001      	b.n	8000f2c <HAL_RCC_OscConfig+0x438>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e000      	b.n	8000f2e <HAL_RCC_OscConfig+0x43a>
    }
  }
  return HAL_OK;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40007000 	.word	0x40007000
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	42470060 	.word	0x42470060

08000f44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d101      	bne.n	8000f58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e0ca      	b.n	80010ee <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f58:	4b67      	ldr	r3, [pc, #412]	; (80010f8 <HAL_RCC_ClockConfig+0x1b4>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f003 020f 	and.w	r2, r3, #15
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d20c      	bcs.n	8000f80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f66:	4b64      	ldr	r3, [pc, #400]	; (80010f8 <HAL_RCC_ClockConfig+0x1b4>)
 8000f68:	683a      	ldr	r2, [r7, #0]
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f6e:	4b62      	ldr	r3, [pc, #392]	; (80010f8 <HAL_RCC_ClockConfig+0x1b4>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f003 020f 	and.w	r2, r3, #15
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d001      	beq.n	8000f80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e0b6      	b.n	80010ee <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f003 0302 	and.w	r3, r3, #2
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d020      	beq.n	8000fce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f003 0304 	and.w	r3, r3, #4
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d005      	beq.n	8000fa4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f98:	4a58      	ldr	r2, [pc, #352]	; (80010fc <HAL_RCC_ClockConfig+0x1b8>)
 8000f9a:	4b58      	ldr	r3, [pc, #352]	; (80010fc <HAL_RCC_ClockConfig+0x1b8>)
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000fa2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f003 0308 	and.w	r3, r3, #8
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d005      	beq.n	8000fbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000fb0:	4a52      	ldr	r2, [pc, #328]	; (80010fc <HAL_RCC_ClockConfig+0x1b8>)
 8000fb2:	4b52      	ldr	r3, [pc, #328]	; (80010fc <HAL_RCC_ClockConfig+0x1b8>)
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000fba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fbc:	494f      	ldr	r1, [pc, #316]	; (80010fc <HAL_RCC_ClockConfig+0x1b8>)
 8000fbe:	4b4f      	ldr	r3, [pc, #316]	; (80010fc <HAL_RCC_ClockConfig+0x1b8>)
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d044      	beq.n	8001064 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d107      	bne.n	8000ff2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fe2:	4b46      	ldr	r3, [pc, #280]	; (80010fc <HAL_RCC_ClockConfig+0x1b8>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d119      	bne.n	8001022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e07d      	b.n	80010ee <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d003      	beq.n	8001002 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000ffe:	2b03      	cmp	r3, #3
 8001000:	d107      	bne.n	8001012 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001002:	4b3e      	ldr	r3, [pc, #248]	; (80010fc <HAL_RCC_ClockConfig+0x1b8>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d109      	bne.n	8001022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e06d      	b.n	80010ee <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001012:	4b3a      	ldr	r3, [pc, #232]	; (80010fc <HAL_RCC_ClockConfig+0x1b8>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	2b00      	cmp	r3, #0
 800101c:	d101      	bne.n	8001022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e065      	b.n	80010ee <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001022:	4936      	ldr	r1, [pc, #216]	; (80010fc <HAL_RCC_ClockConfig+0x1b8>)
 8001024:	4b35      	ldr	r3, [pc, #212]	; (80010fc <HAL_RCC_ClockConfig+0x1b8>)
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	f023 0203 	bic.w	r2, r3, #3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	4313      	orrs	r3, r2
 8001032:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001034:	f7ff faa4 	bl	8000580 <HAL_GetTick>
 8001038:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800103a:	e00a      	b.n	8001052 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800103c:	f7ff faa0 	bl	8000580 <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	f241 3288 	movw	r2, #5000	; 0x1388
 800104a:	4293      	cmp	r3, r2
 800104c:	d901      	bls.n	8001052 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800104e:	2303      	movs	r3, #3
 8001050:	e04d      	b.n	80010ee <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001052:	4b2a      	ldr	r3, [pc, #168]	; (80010fc <HAL_RCC_ClockConfig+0x1b8>)
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	f003 020c 	and.w	r2, r3, #12
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	429a      	cmp	r2, r3
 8001062:	d1eb      	bne.n	800103c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001064:	4b24      	ldr	r3, [pc, #144]	; (80010f8 <HAL_RCC_ClockConfig+0x1b4>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 020f 	and.w	r2, r3, #15
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	429a      	cmp	r2, r3
 8001070:	d90c      	bls.n	800108c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001072:	4b21      	ldr	r3, [pc, #132]	; (80010f8 <HAL_RCC_ClockConfig+0x1b4>)
 8001074:	683a      	ldr	r2, [r7, #0]
 8001076:	b2d2      	uxtb	r2, r2
 8001078:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800107a:	4b1f      	ldr	r3, [pc, #124]	; (80010f8 <HAL_RCC_ClockConfig+0x1b4>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 020f 	and.w	r2, r3, #15
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	429a      	cmp	r2, r3
 8001086:	d001      	beq.n	800108c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e030      	b.n	80010ee <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 0304 	and.w	r3, r3, #4
 8001094:	2b00      	cmp	r3, #0
 8001096:	d008      	beq.n	80010aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001098:	4918      	ldr	r1, [pc, #96]	; (80010fc <HAL_RCC_ClockConfig+0x1b8>)
 800109a:	4b18      	ldr	r3, [pc, #96]	; (80010fc <HAL_RCC_ClockConfig+0x1b8>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0308 	and.w	r3, r3, #8
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d009      	beq.n	80010ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80010b6:	4911      	ldr	r1, [pc, #68]	; (80010fc <HAL_RCC_ClockConfig+0x1b8>)
 80010b8:	4b10      	ldr	r3, [pc, #64]	; (80010fc <HAL_RCC_ClockConfig+0x1b8>)
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	691b      	ldr	r3, [r3, #16]
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	4313      	orrs	r3, r2
 80010c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010ca:	f000 f81d 	bl	8001108 <HAL_RCC_GetSysClockFreq>
 80010ce:	4601      	mov	r1, r0
 80010d0:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <HAL_RCC_ClockConfig+0x1b8>)
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	091b      	lsrs	r3, r3, #4
 80010d6:	f003 030f 	and.w	r3, r3, #15
 80010da:	4a09      	ldr	r2, [pc, #36]	; (8001100 <HAL_RCC_ClockConfig+0x1bc>)
 80010dc:	5cd3      	ldrb	r3, [r2, r3]
 80010de:	fa21 f303 	lsr.w	r3, r1, r3
 80010e2:	4a08      	ldr	r2, [pc, #32]	; (8001104 <HAL_RCC_ClockConfig+0x1c0>)
 80010e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80010e6:	2000      	movs	r0, #0
 80010e8:	f7ff fa20 	bl	800052c <HAL_InitTick>

  return HAL_OK;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40023c00 	.word	0x40023c00
 80010fc:	40023800 	.word	0x40023800
 8001100:	08001de4 	.word	0x08001de4
 8001104:	20000000 	.word	0x20000000

08001108 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800110c:	b08f      	sub	sp, #60	; 0x3c
 800110e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001110:	2300      	movs	r3, #0
 8001112:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001114:	2300      	movs	r3, #0
 8001116:	637b      	str	r3, [r7, #52]	; 0x34
 8001118:	2300      	movs	r3, #0
 800111a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 800111c:	2300      	movs	r3, #0
 800111e:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001120:	4b62      	ldr	r3, [pc, #392]	; (80012ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	f003 030c 	and.w	r3, r3, #12
 8001128:	2b04      	cmp	r3, #4
 800112a:	d007      	beq.n	800113c <HAL_RCC_GetSysClockFreq+0x34>
 800112c:	2b08      	cmp	r3, #8
 800112e:	d008      	beq.n	8001142 <HAL_RCC_GetSysClockFreq+0x3a>
 8001130:	2b00      	cmp	r3, #0
 8001132:	f040 80b2 	bne.w	800129a <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001136:	4b5e      	ldr	r3, [pc, #376]	; (80012b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001138:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 800113a:	e0b1      	b.n	80012a0 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800113c:	4b5d      	ldr	r3, [pc, #372]	; (80012b4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800113e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001140:	e0ae      	b.n	80012a0 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001142:	4b5a      	ldr	r3, [pc, #360]	; (80012ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800114a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800114c:	4b57      	ldr	r3, [pc, #348]	; (80012ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d04e      	beq.n	80011f6 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001158:	4b54      	ldr	r3, [pc, #336]	; (80012ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	099b      	lsrs	r3, r3, #6
 800115e:	f04f 0400 	mov.w	r4, #0
 8001162:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	ea01 0103 	and.w	r1, r1, r3
 800116e:	ea02 0204 	and.w	r2, r2, r4
 8001172:	460b      	mov	r3, r1
 8001174:	4614      	mov	r4, r2
 8001176:	0160      	lsls	r0, r4, #5
 8001178:	6278      	str	r0, [r7, #36]	; 0x24
 800117a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800117c:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001180:	6278      	str	r0, [r7, #36]	; 0x24
 8001182:	015b      	lsls	r3, r3, #5
 8001184:	623b      	str	r3, [r7, #32]
 8001186:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800118a:	1a5b      	subs	r3, r3, r1
 800118c:	eb64 0402 	sbc.w	r4, r4, r2
 8001190:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8001194:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8001198:	ea4f 1883 	mov.w	r8, r3, lsl #6
 800119c:	ebb8 0803 	subs.w	r8, r8, r3
 80011a0:	eb69 0904 	sbc.w	r9, r9, r4
 80011a4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80011a8:	61fb      	str	r3, [r7, #28]
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80011b0:	61fb      	str	r3, [r7, #28]
 80011b2:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80011b6:	61bb      	str	r3, [r7, #24]
 80011b8:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80011bc:	eb18 0801 	adds.w	r8, r8, r1
 80011c0:	eb49 0902 	adc.w	r9, r9, r2
 80011c4:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80011c8:	617b      	str	r3, [r7, #20]
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80011d0:	617b      	str	r3, [r7, #20]
 80011d2:	ea4f 2348 	mov.w	r3, r8, lsl #9
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80011dc:	4640      	mov	r0, r8
 80011de:	4649      	mov	r1, r9
 80011e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e2:	f04f 0400 	mov.w	r4, #0
 80011e6:	461a      	mov	r2, r3
 80011e8:	4623      	mov	r3, r4
 80011ea:	f7fe fff5 	bl	80001d8 <__aeabi_uldivmod>
 80011ee:	4603      	mov	r3, r0
 80011f0:	460c      	mov	r4, r1
 80011f2:	637b      	str	r3, [r7, #52]	; 0x34
 80011f4:	e043      	b.n	800127e <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011f6:	4b2d      	ldr	r3, [pc, #180]	; (80012ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	099b      	lsrs	r3, r3, #6
 80011fc:	f04f 0400 	mov.w	r4, #0
 8001200:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001204:	f04f 0200 	mov.w	r2, #0
 8001208:	ea01 0103 	and.w	r1, r1, r3
 800120c:	ea02 0204 	and.w	r2, r2, r4
 8001210:	460b      	mov	r3, r1
 8001212:	4614      	mov	r4, r2
 8001214:	0160      	lsls	r0, r4, #5
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	68f8      	ldr	r0, [r7, #12]
 800121a:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	015b      	lsls	r3, r3, #5
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001228:	1a5b      	subs	r3, r3, r1
 800122a:	eb64 0402 	sbc.w	r4, r4, r2
 800122e:	01a6      	lsls	r6, r4, #6
 8001230:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8001234:	019d      	lsls	r5, r3, #6
 8001236:	1aed      	subs	r5, r5, r3
 8001238:	eb66 0604 	sbc.w	r6, r6, r4
 800123c:	00f3      	lsls	r3, r6, #3
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	00eb      	lsls	r3, r5, #3
 800124a:	603b      	str	r3, [r7, #0]
 800124c:	e897 0060 	ldmia.w	r7, {r5, r6}
 8001250:	186d      	adds	r5, r5, r1
 8001252:	eb46 0602 	adc.w	r6, r6, r2
 8001256:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 800125a:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 800125e:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8001262:	4655      	mov	r5, sl
 8001264:	465e      	mov	r6, fp
 8001266:	4628      	mov	r0, r5
 8001268:	4631      	mov	r1, r6
 800126a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800126c:	f04f 0400 	mov.w	r4, #0
 8001270:	461a      	mov	r2, r3
 8001272:	4623      	mov	r3, r4
 8001274:	f7fe ffb0 	bl	80001d8 <__aeabi_uldivmod>
 8001278:	4603      	mov	r3, r0
 800127a:	460c      	mov	r4, r1
 800127c:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800127e:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	0c1b      	lsrs	r3, r3, #16
 8001284:	f003 0303 	and.w	r3, r3, #3
 8001288:	3301      	adds	r3, #1
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 800128e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001292:	fbb2 f3f3 	udiv	r3, r2, r3
 8001296:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001298:	e002      	b.n	80012a0 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800129a:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800129c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800129e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	373c      	adds	r7, #60	; 0x3c
 80012a6:	46bd      	mov	sp, r7
 80012a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012ac:	40023800 	.word	0x40023800
 80012b0:	00f42400 	.word	0x00f42400
 80012b4:	007a1200 	.word	0x007a1200

080012b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012bc:	4b03      	ldr	r3, [pc, #12]	; (80012cc <HAL_RCC_GetHCLKFreq+0x14>)
 80012be:	681b      	ldr	r3, [r3, #0]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	20000000 	.word	0x20000000

080012d0 <HAL_TIM_Encoder_Init>:
  *                the configuration information for TIM module.
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
  uint32_t tmpccmr1 = 0U;
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
  
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d101      	bne.n	80012f0 <HAL_TIM_Encoder_Init+0x20>
  {
    return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e081      	b.n	80013f4 <HAL_TIM_Encoder_Init+0x124>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d106      	bne.n	800130a <HAL_TIM_Encoder_Init+0x3a>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f000 fbef 	bl	8001ae8 <HAL_TIM_Encoder_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2202      	movs	r2, #2
 800130e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	6812      	ldr	r2, [r2, #0]
 800131a:	6892      	ldr	r2, [r2, #8]
 800131c:	f022 0207 	bic.w	r2, r2, #7
 8001320:	609a      	str	r2, [r3, #8]
  
  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	3304      	adds	r3, #4
 800132a:	4619      	mov	r1, r3
 800132c:	4610      	mov	r0, r2
 800132e:	f000 f89d 	bl	800146c <TIM_Base_SetConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	697a      	ldr	r2, [r7, #20]
 8001350:	4313      	orrs	r3, r2
 8001352:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800135a:	f023 0303 	bic.w	r3, r3, #3
 800135e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	021b      	lsls	r3, r3, #8
 800136a:	4313      	orrs	r3, r2
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	4313      	orrs	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001378:	f023 030c 	bic.w	r3, r3, #12
 800137c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001384:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001388:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	68da      	ldr	r2, [r3, #12]
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	69db      	ldr	r3, [r3, #28]
 8001392:	021b      	lsls	r3, r3, #8
 8001394:	4313      	orrs	r3, r2
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	011a      	lsls	r2, r3, #4
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	6a1b      	ldr	r3, [r3, #32]
 80013a6:	031b      	lsls	r3, r3, #12
 80013a8:	4313      	orrs	r3, r2
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80013b6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80013be:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685a      	ldr	r2, [r3, #4]
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	695b      	ldr	r3, [r3, #20]
 80013c8:	011b      	lsls	r3, r3, #4
 80013ca:	4313      	orrs	r3, r2
 80013cc:	68fa      	ldr	r2, [r7, #12]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	60fb      	str	r3, [r7, #12]
  
  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	621a      	str	r2, [r3, #32]
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2201      	movs	r2, #1
 80013ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
  
  /* Enable the encoder interface channels */
  switch (Channel)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d002      	beq.n	8001412 <HAL_TIM_Encoder_Start+0x16>
 800140c:	2b04      	cmp	r3, #4
 800140e:	d008      	beq.n	8001422 <HAL_TIM_Encoder_Start+0x26>
 8001410:	e00f      	b.n	8001432 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2201      	movs	r2, #1
 8001418:	2100      	movs	r1, #0
 800141a:	4618      	mov	r0, r3
 800141c:	f000 f8aa 	bl	8001574 <TIM_CCxChannelCmd>
      break; 
 8001420:	e016      	b.n	8001450 <HAL_TIM_Encoder_Start+0x54>
    }
    case TIM_CHANNEL_2:
    { 
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE); 
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2201      	movs	r2, #1
 8001428:	2104      	movs	r1, #4
 800142a:	4618      	mov	r0, r3
 800142c:	f000 f8a2 	bl	8001574 <TIM_CCxChannelCmd>
      break;
 8001430:	e00e      	b.n	8001450 <HAL_TIM_Encoder_Start+0x54>
    }  
    default :
    {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2201      	movs	r2, #1
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f000 f89a 	bl	8001574 <TIM_CCxChannelCmd>
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2201      	movs	r2, #1
 8001446:	2104      	movs	r1, #4
 8001448:	4618      	mov	r0, r3
 800144a:	f000 f893 	bl	8001574 <TIM_CCxChannelCmd>
     break; 
 800144e:	bf00      	nop
    }
  }  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	6812      	ldr	r2, [r2, #0]
 8001458:	6812      	ldr	r2, [r2, #0]
 800145a:	f042 0201 	orr.w	r2, r2, #1
 800145e:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4a35      	ldr	r2, [pc, #212]	; (8001558 <TIM_Base_SetConfig+0xec>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d00f      	beq.n	80014a8 <TIM_Base_SetConfig+0x3c>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800148e:	d00b      	beq.n	80014a8 <TIM_Base_SetConfig+0x3c>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4a32      	ldr	r2, [pc, #200]	; (800155c <TIM_Base_SetConfig+0xf0>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d007      	beq.n	80014a8 <TIM_Base_SetConfig+0x3c>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a31      	ldr	r2, [pc, #196]	; (8001560 <TIM_Base_SetConfig+0xf4>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d003      	beq.n	80014a8 <TIM_Base_SetConfig+0x3c>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a30      	ldr	r2, [pc, #192]	; (8001564 <TIM_Base_SetConfig+0xf8>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d101      	bne.n	80014ac <TIM_Base_SetConfig+0x40>
 80014a8:	2301      	movs	r3, #1
 80014aa:	e000      	b.n	80014ae <TIM_Base_SetConfig+0x42>
 80014ac:	2300      	movs	r3, #0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d008      	beq.n	80014c4 <TIM_Base_SetConfig+0x58>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4a24      	ldr	r2, [pc, #144]	; (8001558 <TIM_Base_SetConfig+0xec>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d01b      	beq.n	8001504 <TIM_Base_SetConfig+0x98>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014d2:	d017      	beq.n	8001504 <TIM_Base_SetConfig+0x98>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a21      	ldr	r2, [pc, #132]	; (800155c <TIM_Base_SetConfig+0xf0>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d013      	beq.n	8001504 <TIM_Base_SetConfig+0x98>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a20      	ldr	r2, [pc, #128]	; (8001560 <TIM_Base_SetConfig+0xf4>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d00f      	beq.n	8001504 <TIM_Base_SetConfig+0x98>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a1f      	ldr	r2, [pc, #124]	; (8001564 <TIM_Base_SetConfig+0xf8>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d00b      	beq.n	8001504 <TIM_Base_SetConfig+0x98>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a1e      	ldr	r2, [pc, #120]	; (8001568 <TIM_Base_SetConfig+0xfc>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d007      	beq.n	8001504 <TIM_Base_SetConfig+0x98>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a1d      	ldr	r2, [pc, #116]	; (800156c <TIM_Base_SetConfig+0x100>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d003      	beq.n	8001504 <TIM_Base_SetConfig+0x98>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a1c      	ldr	r2, [pc, #112]	; (8001570 <TIM_Base_SetConfig+0x104>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d101      	bne.n	8001508 <TIM_Base_SetConfig+0x9c>
 8001504:	2301      	movs	r3, #1
 8001506:	e000      	b.n	800150a <TIM_Base_SetConfig+0x9e>
 8001508:	2300      	movs	r3, #0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d008      	beq.n	8001520 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001514:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	4313      	orrs	r3, r2
 800151e:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	689a      	ldr	r2, [r3, #8]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a07      	ldr	r2, [pc, #28]	; (8001558 <TIM_Base_SetConfig+0xec>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d103      	bne.n	8001546 <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	691a      	ldr	r2, [r3, #16]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2201      	movs	r2, #1
 800154a:	615a      	str	r2, [r3, #20]
}
 800154c:	bf00      	nop
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	40010000 	.word	0x40010000
 800155c:	40000400 	.word	0x40000400
 8001560:	40000800 	.word	0x40000800
 8001564:	40000c00 	.word	0x40000c00
 8001568:	40014000 	.word	0x40014000
 800156c:	40014400 	.word	0x40014400
 8001570:	40014800 	.word	0x40014800

08001574 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001574:	b480      	push	{r7}
 8001576:	b087      	sub	sp, #28
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8001584:	2201      	movs	r2, #1
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6a1a      	ldr	r2, [r3, #32]
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	43db      	mvns	r3, r3
 8001596:	401a      	ands	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	6a1a      	ldr	r2, [r3, #32]
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	fa01 f303 	lsl.w	r3, r1, r3
 80015a8:	431a      	orrs	r2, r3
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	621a      	str	r2, [r3, #32]
}
 80015ae:	bf00      	nop
 80015b0:	371c      	adds	r7, #28
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80015ba:	b480      	push	{r7}
 80015bc:	b083      	sub	sp, #12
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
 80015c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d101      	bne.n	80015d2 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80015ce:	2302      	movs	r3, #2
 80015d0:	e032      	b.n	8001638 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2202      	movs	r2, #2
 80015de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	6812      	ldr	r2, [r2, #0]
 80015ea:	6852      	ldr	r2, [r2, #4]
 80015ec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80015f0:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	6812      	ldr	r2, [r2, #0]
 80015fa:	6851      	ldr	r1, [r2, #4]
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	6812      	ldr	r2, [r2, #0]
 8001600:	430a      	orrs	r2, r1
 8001602:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	6812      	ldr	r2, [r2, #0]
 800160c:	6892      	ldr	r2, [r2, #8]
 800160e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001612:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	6812      	ldr	r2, [r2, #0]
 800161c:	6891      	ldr	r1, [r2, #8]
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	6852      	ldr	r2, [r2, #4]
 8001622:	430a      	orrs	r2, r1
 8001624:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2201      	movs	r2, #1
 800162a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8001636:	2300      	movs	r3, #0
} 
 8001638:	4618      	mov	r0, r3
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
  HAL_Init();
 800164a:	f7fe ff4d 	bl	80004e8 <HAL_Init>
  SystemClock_Config();
 800164e:	f000 f829 	bl	80016a4 <SystemClock_Config>
  MX_GPIO_Init();
 8001652:	f000 f9cd 	bl	80019f0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001656:	f000 f899 	bl	800178c <MX_TIM2_Init>
  MX_TIM5_Init();
 800165a:	f000 f97b 	bl	8001954 <MX_TIM5_Init>
  MX_TIM4_Init();
 800165e:	f000 f92d 	bl	80018bc <MX_TIM4_Init>
  MX_TIM3_Init();
 8001662:	f000 f8df 	bl	8001824 <MX_TIM3_Init>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001666:	2118      	movs	r1, #24
 8001668:	480b      	ldr	r0, [pc, #44]	; (8001698 <main+0x54>)
 800166a:	f7ff fec7 	bl	80013fc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800166e:	2118      	movs	r1, #24
 8001670:	480a      	ldr	r0, [pc, #40]	; (800169c <main+0x58>)
 8001672:	f7ff fec3 	bl	80013fc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001676:	2118      	movs	r1, #24
 8001678:	4809      	ldr	r0, [pc, #36]	; (80016a0 <main+0x5c>)
 800167a:	f7ff febf 	bl	80013fc <HAL_TIM_Encoder_Start>
  uint32_t encoderCNT = 1000;
 800167e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001682:	607b      	str	r3, [r7, #4]
  while (1)
  {
   HAL_Delay(1000);
 8001684:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001688:	f7fe ff86 	bl	8000598 <HAL_Delay>
//   encoderCNT = htim2.Instance->CNT;
   	 encoderCNT = htim3.Instance->CNT;
 800168c:	4b03      	ldr	r3, [pc, #12]	; (800169c <main+0x58>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001692:	607b      	str	r3, [r7, #4]
   HAL_Delay(1000);
 8001694:	e7f6      	b.n	8001684 <main+0x40>
 8001696:	bf00      	nop
 8001698:	200000fc 	.word	0x200000fc
 800169c:	200000bc 	.word	0x200000bc
 80016a0:	20000024 	.word	0x20000024

080016a4 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b094      	sub	sp, #80	; 0x50
 80016a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	4a33      	ldr	r2, [pc, #204]	; (800177c <SystemClock_Config+0xd8>)
 80016b0:	4b32      	ldr	r3, [pc, #200]	; (800177c <SystemClock_Config+0xd8>)
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ba:	4b30      	ldr	r3, [pc, #192]	; (800177c <SystemClock_Config+0xd8>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016c6:	2300      	movs	r3, #0
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	4a2d      	ldr	r2, [pc, #180]	; (8001780 <SystemClock_Config+0xdc>)
 80016cc:	4b2c      	ldr	r3, [pc, #176]	; (8001780 <SystemClock_Config+0xdc>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	4b2a      	ldr	r3, [pc, #168]	; (8001780 <SystemClock_Config+0xdc>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016de:	607b      	str	r3, [r7, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016e2:	2301      	movs	r3, #1
 80016e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ec:	2302      	movs	r3, #2
 80016ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016f6:	2304      	movs	r3, #4
 80016f8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80016fa:	2348      	movs	r3, #72	; 0x48
 80016fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016fe:	2302      	movs	r3, #2
 8001700:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001702:	2304      	movs	r3, #4
 8001704:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001706:	f107 0320 	add.w	r3, r7, #32
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff f9f2 	bl	8000af4 <HAL_RCC_OscConfig>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <SystemClock_Config+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001716:	217e      	movs	r1, #126	; 0x7e
 8001718:	481a      	ldr	r0, [pc, #104]	; (8001784 <SystemClock_Config+0xe0>)
 800171a:	f000 f9ad 	bl	8001a78 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800171e:	230f      	movs	r3, #15
 8001720:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001722:	2302      	movs	r3, #2
 8001724:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800172a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800172e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001730:	2300      	movs	r3, #0
 8001732:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001734:	f107 030c 	add.w	r3, r7, #12
 8001738:	2102      	movs	r1, #2
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff fc02 	bl	8000f44 <HAL_RCC_ClockConfig>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <SystemClock_Config+0xaa>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001746:	218c      	movs	r1, #140	; 0x8c
 8001748:	480e      	ldr	r0, [pc, #56]	; (8001784 <SystemClock_Config+0xe0>)
 800174a:	f000 f995 	bl	8001a78 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800174e:	f7ff fdb3 	bl	80012b8 <HAL_RCC_GetHCLKFreq>
 8001752:	4602      	mov	r2, r0
 8001754:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <SystemClock_Config+0xe4>)
 8001756:	fba3 2302 	umull	r2, r3, r3, r2
 800175a:	099b      	lsrs	r3, r3, #6
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff f810 	bl	8000782 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001762:	2004      	movs	r0, #4
 8001764:	f7ff f81a 	bl	800079c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001768:	2200      	movs	r2, #0
 800176a:	2100      	movs	r1, #0
 800176c:	f04f 30ff 	mov.w	r0, #4294967295
 8001770:	f7fe ffeb 	bl	800074a <HAL_NVIC_SetPriority>
}
 8001774:	bf00      	nop
 8001776:	3750      	adds	r7, #80	; 0x50
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40023800 	.word	0x40023800
 8001780:	40007000 	.word	0x40007000
 8001784:	08001dd4 	.word	0x08001dd4
 8001788:	10624dd3 	.word	0x10624dd3

0800178c <MX_TIM2_Init>:

/* TIM2 init function */
static void MX_TIM2_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08c      	sub	sp, #48	; 0x30
 8001790:	af00      	add	r7, sp, #0

  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 8001792:	4b22      	ldr	r3, [pc, #136]	; (800181c <MX_TIM2_Init+0x90>)
 8001794:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001798:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800179a:	4b20      	ldr	r3, [pc, #128]	; (800181c <MX_TIM2_Init+0x90>)
 800179c:	2200      	movs	r2, #0
 800179e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a0:	4b1e      	ldr	r3, [pc, #120]	; (800181c <MX_TIM2_Init+0x90>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 80017a6:	4b1d      	ldr	r3, [pc, #116]	; (800181c <MX_TIM2_Init+0x90>)
 80017a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ae:	4b1b      	ldr	r3, [pc, #108]	; (800181c <MX_TIM2_Init+0x90>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	611a      	str	r2, [r3, #16]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80017b4:	2303      	movs	r3, #3
 80017b6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017b8:	2300      	movs	r3, #0
 80017ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017bc:	2301      	movs	r3, #1
 80017be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017c0:	2300      	movs	r3, #0
 80017c2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017c8:	2300      	movs	r3, #0
 80017ca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017cc:	2301      	movs	r3, #1
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017d0:	2300      	movs	r3, #0
 80017d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80017d8:	f107 030c 	add.w	r3, r7, #12
 80017dc:	4619      	mov	r1, r3
 80017de:	480f      	ldr	r0, [pc, #60]	; (800181c <MX_TIM2_Init+0x90>)
 80017e0:	f7ff fd76 	bl	80012d0 <HAL_TIM_Encoder_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <MX_TIM2_Init+0x66>
  {
    _Error_Handler(__FILE__, __LINE__);
 80017ea:	21b2      	movs	r1, #178	; 0xb2
 80017ec:	480c      	ldr	r0, [pc, #48]	; (8001820 <MX_TIM2_Init+0x94>)
 80017ee:	f000 f943 	bl	8001a78 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f2:	2300      	movs	r3, #0
 80017f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f6:	2300      	movs	r3, #0
 80017f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017fa:	1d3b      	adds	r3, r7, #4
 80017fc:	4619      	mov	r1, r3
 80017fe:	4807      	ldr	r0, [pc, #28]	; (800181c <MX_TIM2_Init+0x90>)
 8001800:	f7ff fedb 	bl	80015ba <HAL_TIMEx_MasterConfigSynchronization>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d003      	beq.n	8001812 <MX_TIM2_Init+0x86>
  {
    _Error_Handler(__FILE__, __LINE__);
 800180a:	21b9      	movs	r1, #185	; 0xb9
 800180c:	4804      	ldr	r0, [pc, #16]	; (8001820 <MX_TIM2_Init+0x94>)
 800180e:	f000 f933 	bl	8001a78 <_Error_Handler>
  }

}
 8001812:	bf00      	nop
 8001814:	3730      	adds	r7, #48	; 0x30
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	200000fc 	.word	0x200000fc
 8001820:	08001dd4 	.word	0x08001dd4

08001824 <MX_TIM3_Init>:

/* TIM3 init function */
static void MX_TIM3_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08c      	sub	sp, #48	; 0x30
 8001828:	af00      	add	r7, sp, #0

  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
 800182a:	4b21      	ldr	r3, [pc, #132]	; (80018b0 <MX_TIM3_Init+0x8c>)
 800182c:	4a21      	ldr	r2, [pc, #132]	; (80018b4 <MX_TIM3_Init+0x90>)
 800182e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001830:	4b1f      	ldr	r3, [pc, #124]	; (80018b0 <MX_TIM3_Init+0x8c>)
 8001832:	2200      	movs	r2, #0
 8001834:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001836:	4b1e      	ldr	r3, [pc, #120]	; (80018b0 <MX_TIM3_Init+0x8c>)
 8001838:	2200      	movs	r2, #0
 800183a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff;
 800183c:	4b1c      	ldr	r3, [pc, #112]	; (80018b0 <MX_TIM3_Init+0x8c>)
 800183e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001842:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001844:	4b1a      	ldr	r3, [pc, #104]	; (80018b0 <MX_TIM3_Init+0x8c>)
 8001846:	2200      	movs	r2, #0
 8001848:	611a      	str	r2, [r3, #16]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800184a:	2303      	movs	r3, #3
 800184c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800184e:	2300      	movs	r3, #0
 8001850:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001852:	2301      	movs	r3, #1
 8001854:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001856:	2300      	movs	r3, #0
 8001858:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800185e:	2300      	movs	r3, #0
 8001860:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001862:	2301      	movs	r3, #1
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001866:	2300      	movs	r3, #0
 8001868:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800186a:	2300      	movs	r3, #0
 800186c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800186e:	f107 030c 	add.w	r3, r7, #12
 8001872:	4619      	mov	r1, r3
 8001874:	480e      	ldr	r0, [pc, #56]	; (80018b0 <MX_TIM3_Init+0x8c>)
 8001876:	f7ff fd2b 	bl	80012d0 <HAL_TIM_Encoder_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d003      	beq.n	8001888 <MX_TIM3_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001880:	21d5      	movs	r1, #213	; 0xd5
 8001882:	480d      	ldr	r0, [pc, #52]	; (80018b8 <MX_TIM3_Init+0x94>)
 8001884:	f000 f8f8 	bl	8001a78 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001888:	2300      	movs	r3, #0
 800188a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800188c:	2300      	movs	r3, #0
 800188e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	4619      	mov	r1, r3
 8001894:	4806      	ldr	r0, [pc, #24]	; (80018b0 <MX_TIM3_Init+0x8c>)
 8001896:	f7ff fe90 	bl	80015ba <HAL_TIMEx_MasterConfigSynchronization>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d003      	beq.n	80018a8 <MX_TIM3_Init+0x84>
  {
    _Error_Handler(__FILE__, __LINE__);
 80018a0:	21dc      	movs	r1, #220	; 0xdc
 80018a2:	4805      	ldr	r0, [pc, #20]	; (80018b8 <MX_TIM3_Init+0x94>)
 80018a4:	f000 f8e8 	bl	8001a78 <_Error_Handler>
  }

}
 80018a8:	bf00      	nop
 80018aa:	3730      	adds	r7, #48	; 0x30
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	200000bc 	.word	0x200000bc
 80018b4:	40000400 	.word	0x40000400
 80018b8:	08001dd4 	.word	0x08001dd4

080018bc <MX_TIM4_Init>:

/* TIM4 init function */
static void MX_TIM4_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08c      	sub	sp, #48	; 0x30
 80018c0:	af00      	add	r7, sp, #0

  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim4.Instance = TIM4;
 80018c2:	4b21      	ldr	r3, [pc, #132]	; (8001948 <MX_TIM4_Init+0x8c>)
 80018c4:	4a21      	ldr	r2, [pc, #132]	; (800194c <MX_TIM4_Init+0x90>)
 80018c6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80018c8:	4b1f      	ldr	r3, [pc, #124]	; (8001948 <MX_TIM4_Init+0x8c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ce:	4b1e      	ldr	r3, [pc, #120]	; (8001948 <MX_TIM4_Init+0x8c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 80018d4:	4b1c      	ldr	r3, [pc, #112]	; (8001948 <MX_TIM4_Init+0x8c>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018da:	4b1b      	ldr	r3, [pc, #108]	; (8001948 <MX_TIM4_Init+0x8c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	611a      	str	r2, [r3, #16]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80018e0:	2301      	movs	r3, #1
 80018e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018e4:	2300      	movs	r3, #0
 80018e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018e8:	2301      	movs	r3, #1
 80018ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018f4:	2300      	movs	r3, #0
 80018f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018f8:	2301      	movs	r3, #1
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018fc:	2300      	movs	r3, #0
 80018fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001904:	f107 030c 	add.w	r3, r7, #12
 8001908:	4619      	mov	r1, r3
 800190a:	480f      	ldr	r0, [pc, #60]	; (8001948 <MX_TIM4_Init+0x8c>)
 800190c:	f7ff fce0 	bl	80012d0 <HAL_TIM_Encoder_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <MX_TIM4_Init+0x62>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001916:	21f8      	movs	r1, #248	; 0xf8
 8001918:	480d      	ldr	r0, [pc, #52]	; (8001950 <MX_TIM4_Init+0x94>)
 800191a:	f000 f8ad 	bl	8001a78 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800191e:	2300      	movs	r3, #0
 8001920:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001922:	2300      	movs	r3, #0
 8001924:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001926:	1d3b      	adds	r3, r7, #4
 8001928:	4619      	mov	r1, r3
 800192a:	4807      	ldr	r0, [pc, #28]	; (8001948 <MX_TIM4_Init+0x8c>)
 800192c:	f7ff fe45 	bl	80015ba <HAL_TIMEx_MasterConfigSynchronization>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d003      	beq.n	800193e <MX_TIM4_Init+0x82>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001936:	21ff      	movs	r1, #255	; 0xff
 8001938:	4805      	ldr	r0, [pc, #20]	; (8001950 <MX_TIM4_Init+0x94>)
 800193a:	f000 f89d 	bl	8001a78 <_Error_Handler>
  }

}
 800193e:	bf00      	nop
 8001940:	3730      	adds	r7, #48	; 0x30
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000024 	.word	0x20000024
 800194c:	40000800 	.word	0x40000800
 8001950:	08001dd4 	.word	0x08001dd4

08001954 <MX_TIM5_Init>:

/* TIM5 init function */
static void MX_TIM5_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08c      	sub	sp, #48	; 0x30
 8001958:	af00      	add	r7, sp, #0

  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim5.Instance = TIM5;
 800195a:	4b22      	ldr	r3, [pc, #136]	; (80019e4 <MX_TIM5_Init+0x90>)
 800195c:	4a22      	ldr	r2, [pc, #136]	; (80019e8 <MX_TIM5_Init+0x94>)
 800195e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001960:	4b20      	ldr	r3, [pc, #128]	; (80019e4 <MX_TIM5_Init+0x90>)
 8001962:	2200      	movs	r2, #0
 8001964:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001966:	4b1f      	ldr	r3, [pc, #124]	; (80019e4 <MX_TIM5_Init+0x90>)
 8001968:	2200      	movs	r2, #0
 800196a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 800196c:	4b1d      	ldr	r3, [pc, #116]	; (80019e4 <MX_TIM5_Init+0x90>)
 800196e:	2200      	movs	r2, #0
 8001970:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001972:	4b1c      	ldr	r3, [pc, #112]	; (80019e4 <MX_TIM5_Init+0x90>)
 8001974:	2200      	movs	r2, #0
 8001976:	611a      	str	r2, [r3, #16]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001978:	2301      	movs	r3, #1
 800197a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800197c:	2300      	movs	r3, #0
 800197e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001980:	2301      	movs	r3, #1
 8001982:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001984:	2300      	movs	r3, #0
 8001986:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800198c:	2300      	movs	r3, #0
 800198e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001990:	2301      	movs	r3, #1
 8001992:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001994:	2300      	movs	r3, #0
 8001996:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001998:	2300      	movs	r3, #0
 800199a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800199c:	f107 030c 	add.w	r3, r7, #12
 80019a0:	4619      	mov	r1, r3
 80019a2:	4810      	ldr	r0, [pc, #64]	; (80019e4 <MX_TIM5_Init+0x90>)
 80019a4:	f7ff fc94 	bl	80012d0 <HAL_TIM_Encoder_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d004      	beq.n	80019b8 <MX_TIM5_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 80019ae:	f240 111b 	movw	r1, #283	; 0x11b
 80019b2:	480e      	ldr	r0, [pc, #56]	; (80019ec <MX_TIM5_Init+0x98>)
 80019b4:	f000 f860 	bl	8001a78 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019b8:	2300      	movs	r3, #0
 80019ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019bc:	2300      	movs	r3, #0
 80019be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	4619      	mov	r1, r3
 80019c4:	4807      	ldr	r0, [pc, #28]	; (80019e4 <MX_TIM5_Init+0x90>)
 80019c6:	f7ff fdf8 	bl	80015ba <HAL_TIMEx_MasterConfigSynchronization>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d004      	beq.n	80019da <MX_TIM5_Init+0x86>
  {
    _Error_Handler(__FILE__, __LINE__);
 80019d0:	f44f 7191 	mov.w	r1, #290	; 0x122
 80019d4:	4805      	ldr	r0, [pc, #20]	; (80019ec <MX_TIM5_Init+0x98>)
 80019d6:	f000 f84f 	bl	8001a78 <_Error_Handler>
  }

}
 80019da:	bf00      	nop
 80019dc:	3730      	adds	r7, #48	; 0x30
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000080 	.word	0x20000080
 80019e8:	40000c00 	.word	0x40000c00
 80019ec:	08001dd4 	.word	0x08001dd4

080019f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	4a1e      	ldr	r2, [pc, #120]	; (8001a74 <MX_GPIO_Init+0x84>)
 80019fc:	4b1d      	ldr	r3, [pc, #116]	; (8001a74 <MX_GPIO_Init+0x84>)
 80019fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a04:	6313      	str	r3, [r2, #48]	; 0x30
 8001a06:	4b1b      	ldr	r3, [pc, #108]	; (8001a74 <MX_GPIO_Init+0x84>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	4a17      	ldr	r2, [pc, #92]	; (8001a74 <MX_GPIO_Init+0x84>)
 8001a18:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <MX_GPIO_Init+0x84>)
 8001a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	6313      	str	r3, [r2, #48]	; 0x30
 8001a22:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <MX_GPIO_Init+0x84>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	607b      	str	r3, [r7, #4]
 8001a32:	4a10      	ldr	r2, [pc, #64]	; (8001a74 <MX_GPIO_Init+0x84>)
 8001a34:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <MX_GPIO_Init+0x84>)
 8001a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a38:	f043 0308 	orr.w	r3, r3, #8
 8001a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3e:	4b0d      	ldr	r3, [pc, #52]	; (8001a74 <MX_GPIO_Init+0x84>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	f003 0308 	and.w	r3, r3, #8
 8001a46:	607b      	str	r3, [r7, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	603b      	str	r3, [r7, #0]
 8001a4e:	4a09      	ldr	r2, [pc, #36]	; (8001a74 <MX_GPIO_Init+0x84>)
 8001a50:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <MX_GPIO_Init+0x84>)
 8001a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a54:	f043 0302 	orr.w	r3, r3, #2
 8001a58:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5a:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <MX_GPIO_Init+0x84>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	603b      	str	r3, [r7, #0]
 8001a64:	683b      	ldr	r3, [r7, #0]

}
 8001a66:	bf00      	nop
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	40023800 	.word	0x40023800

08001a78 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 8001a82:	e7fe      	b.n	8001a82 <_Error_Handler+0xa>

08001a84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a88:	2003      	movs	r0, #3
 8001a8a:	f7fe fe53 	bl	8000734 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2100      	movs	r1, #0
 8001a92:	f06f 000b 	mvn.w	r0, #11
 8001a96:	f7fe fe58 	bl	800074a <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	f06f 000a 	mvn.w	r0, #10
 8001aa2:	f7fe fe52 	bl	800074a <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	f06f 0009 	mvn.w	r0, #9
 8001aae:	f7fe fe4c 	bl	800074a <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	f06f 0004 	mvn.w	r0, #4
 8001aba:	f7fe fe46 	bl	800074a <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	f06f 0003 	mvn.w	r0, #3
 8001ac6:	f7fe fe40 	bl	800074a <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2100      	movs	r1, #0
 8001ace:	f06f 0001 	mvn.w	r0, #1
 8001ad2:	f7fe fe3a 	bl	800074a <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2100      	movs	r1, #0
 8001ada:	f04f 30ff 	mov.w	r0, #4294967295
 8001ade:	f7fe fe34 	bl	800074a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08c      	sub	sp, #48	; 0x30
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_encoder->Instance==TIM2)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001af8:	d12e      	bne.n	8001b58 <HAL_TIM_Encoder_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	61bb      	str	r3, [r7, #24]
 8001afe:	4a4e      	ldr	r2, [pc, #312]	; (8001c38 <HAL_TIM_Encoder_MspInit+0x150>)
 8001b00:	4b4d      	ldr	r3, [pc, #308]	; (8001c38 <HAL_TIM_Encoder_MspInit+0x150>)
 8001b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0a:	4b4b      	ldr	r3, [pc, #300]	; (8001c38 <HAL_TIM_Encoder_MspInit+0x150>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	61bb      	str	r3, [r7, #24]
 8001b14:	69bb      	ldr	r3, [r7, #24]
  
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b16:	2320      	movs	r3, #32
 8001b18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b22:	2300      	movs	r3, #0
 8001b24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b26:	2301      	movs	r3, #1
 8001b28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2a:	f107 031c 	add.w	r3, r7, #28
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4842      	ldr	r0, [pc, #264]	; (8001c3c <HAL_TIM_Encoder_MspInit+0x154>)
 8001b32:	f7fe fe5d 	bl	80007f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b36:	2308      	movs	r3, #8
 8001b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b42:	2300      	movs	r3, #0
 8001b44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b46:	2301      	movs	r3, #1
 8001b48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b4a:	f107 031c 	add.w	r3, r7, #28
 8001b4e:	4619      	mov	r1, r3
 8001b50:	483b      	ldr	r0, [pc, #236]	; (8001c40 <HAL_TIM_Encoder_MspInit+0x158>)
 8001b52:	f7fe fe4d 	bl	80007f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001b56:	e06b      	b.n	8001c30 <HAL_TIM_Encoder_MspInit+0x148>
  else if(htim_encoder->Instance==TIM3)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a39      	ldr	r2, [pc, #228]	; (8001c44 <HAL_TIM_Encoder_MspInit+0x15c>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d11e      	bne.n	8001ba0 <HAL_TIM_Encoder_MspInit+0xb8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	617b      	str	r3, [r7, #20]
 8001b66:	4a34      	ldr	r2, [pc, #208]	; (8001c38 <HAL_TIM_Encoder_MspInit+0x150>)
 8001b68:	4b33      	ldr	r3, [pc, #204]	; (8001c38 <HAL_TIM_Encoder_MspInit+0x150>)
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6c:	f043 0302 	orr.w	r3, r3, #2
 8001b70:	6413      	str	r3, [r2, #64]	; 0x40
 8001b72:	4b31      	ldr	r3, [pc, #196]	; (8001c38 <HAL_TIM_Encoder_MspInit+0x150>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	617b      	str	r3, [r7, #20]
 8001b7c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b7e:	23c0      	movs	r3, #192	; 0xc0
 8001b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b82:	2302      	movs	r3, #2
 8001b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b86:	2301      	movs	r3, #1
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b92:	f107 031c 	add.w	r3, r7, #28
 8001b96:	4619      	mov	r1, r3
 8001b98:	4828      	ldr	r0, [pc, #160]	; (8001c3c <HAL_TIM_Encoder_MspInit+0x154>)
 8001b9a:	f7fe fe29 	bl	80007f0 <HAL_GPIO_Init>
}
 8001b9e:	e047      	b.n	8001c30 <HAL_TIM_Encoder_MspInit+0x148>
  else if(htim_encoder->Instance==TIM4)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a28      	ldr	r2, [pc, #160]	; (8001c48 <HAL_TIM_Encoder_MspInit+0x160>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d11f      	bne.n	8001bea <HAL_TIM_Encoder_MspInit+0x102>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	613b      	str	r3, [r7, #16]
 8001bae:	4a22      	ldr	r2, [pc, #136]	; (8001c38 <HAL_TIM_Encoder_MspInit+0x150>)
 8001bb0:	4b21      	ldr	r3, [pc, #132]	; (8001c38 <HAL_TIM_Encoder_MspInit+0x150>)
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	f043 0304 	orr.w	r3, r3, #4
 8001bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bba:	4b1f      	ldr	r3, [pc, #124]	; (8001c38 <HAL_TIM_Encoder_MspInit+0x150>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	f003 0304 	and.w	r3, r3, #4
 8001bc2:	613b      	str	r3, [r7, #16]
 8001bc4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001bc6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bdc:	f107 031c 	add.w	r3, r7, #28
 8001be0:	4619      	mov	r1, r3
 8001be2:	481a      	ldr	r0, [pc, #104]	; (8001c4c <HAL_TIM_Encoder_MspInit+0x164>)
 8001be4:	f7fe fe04 	bl	80007f0 <HAL_GPIO_Init>
}
 8001be8:	e022      	b.n	8001c30 <HAL_TIM_Encoder_MspInit+0x148>
  else if(htim_encoder->Instance==TIM5)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a18      	ldr	r2, [pc, #96]	; (8001c50 <HAL_TIM_Encoder_MspInit+0x168>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d11d      	bne.n	8001c30 <HAL_TIM_Encoder_MspInit+0x148>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	4a0f      	ldr	r2, [pc, #60]	; (8001c38 <HAL_TIM_Encoder_MspInit+0x150>)
 8001bfa:	4b0f      	ldr	r3, [pc, #60]	; (8001c38 <HAL_TIM_Encoder_MspInit+0x150>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	f043 0308 	orr.w	r3, r3, #8
 8001c02:	6413      	str	r3, [r2, #64]	; 0x40
 8001c04:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <HAL_TIM_Encoder_MspInit+0x150>)
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	f003 0308 	and.w	r3, r3, #8
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c10:	2303      	movs	r3, #3
 8001c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c14:	2302      	movs	r3, #2
 8001c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001c20:	2302      	movs	r3, #2
 8001c22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c24:	f107 031c 	add.w	r3, r7, #28
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4804      	ldr	r0, [pc, #16]	; (8001c3c <HAL_TIM_Encoder_MspInit+0x154>)
 8001c2c:	f7fe fde0 	bl	80007f0 <HAL_GPIO_Init>
}
 8001c30:	bf00      	nop
 8001c32:	3730      	adds	r7, #48	; 0x30
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	40020000 	.word	0x40020000
 8001c40:	40020400 	.word	0x40020400
 8001c44:	40000400 	.word	0x40000400
 8001c48:	40000800 	.word	0x40000800
 8001c4c:	40020c00 	.word	0x40020c00
 8001c50:	40000c00 	.word	0x40000c00

08001c54 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c66:	e7fe      	b.n	8001c66 <HardFault_Handler+0x4>

08001c68 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c6c:	e7fe      	b.n	8001c6c <MemManage_Handler+0x4>

08001c6e <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c72:	e7fe      	b.n	8001c72 <BusFault_Handler+0x4>

08001c74 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c78:	e7fe      	b.n	8001c78 <UsageFault_Handler+0x4>

08001c7a <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ca8:	f7fe fc5c 	bl	8000564 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001cac:	f7fe fd92 	bl	80007d4 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cb0:	bf00      	nop
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cb8:	4a16      	ldr	r2, [pc, #88]	; (8001d14 <SystemInit+0x60>)
 8001cba:	4b16      	ldr	r3, [pc, #88]	; (8001d14 <SystemInit+0x60>)
 8001cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001cc8:	4a13      	ldr	r2, [pc, #76]	; (8001d18 <SystemInit+0x64>)
 8001cca:	4b13      	ldr	r3, [pc, #76]	; (8001d18 <SystemInit+0x64>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001cd4:	4b10      	ldr	r3, [pc, #64]	; (8001d18 <SystemInit+0x64>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001cda:	4a0f      	ldr	r2, [pc, #60]	; (8001d18 <SystemInit+0x64>)
 8001cdc:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <SystemInit+0x64>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001ce4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ce8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001cea:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <SystemInit+0x64>)
 8001cec:	4a0b      	ldr	r2, [pc, #44]	; (8001d1c <SystemInit+0x68>)
 8001cee:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001cf0:	4a09      	ldr	r2, [pc, #36]	; (8001d18 <SystemInit+0x64>)
 8001cf2:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <SystemInit+0x64>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cfa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001cfc:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <SystemInit+0x64>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d02:	4b04      	ldr	r3, [pc, #16]	; (8001d14 <SystemInit+0x60>)
 8001d04:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d08:	609a      	str	r2, [r3, #8]
#endif
}
 8001d0a:	bf00      	nop
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	e000ed00 	.word	0xe000ed00
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	24003010 	.word	0x24003010

08001d20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d58 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d24:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d26:	e003      	b.n	8001d30 <LoopCopyDataInit>

08001d28 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d2a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d2c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d2e:	3104      	adds	r1, #4

08001d30 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d30:	480b      	ldr	r0, [pc, #44]	; (8001d60 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d32:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d34:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d36:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d38:	d3f6      	bcc.n	8001d28 <CopyDataInit>
  ldr  r2, =_sbss
 8001d3a:	4a0b      	ldr	r2, [pc, #44]	; (8001d68 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d3c:	e002      	b.n	8001d44 <LoopFillZerobss>

08001d3e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d3e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d40:	f842 3b04 	str.w	r3, [r2], #4

08001d44 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d44:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d46:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d48:	d3f9      	bcc.n	8001d3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d4a:	f7ff ffb3 	bl	8001cb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d4e:	f000 f811 	bl	8001d74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d52:	f7ff fc77 	bl	8001644 <main>
  bx  lr    
 8001d56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d58:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001d5c:	08001e04 	.word	0x08001e04
  ldr  r0, =_sdata
 8001d60:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d64:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8001d68:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8001d6c:	20000138 	.word	0x20000138

08001d70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d70:	e7fe      	b.n	8001d70 <ADC_IRQHandler>
	...

08001d74 <__libc_init_array>:
 8001d74:	b570      	push	{r4, r5, r6, lr}
 8001d76:	4e0d      	ldr	r6, [pc, #52]	; (8001dac <__libc_init_array+0x38>)
 8001d78:	4c0d      	ldr	r4, [pc, #52]	; (8001db0 <__libc_init_array+0x3c>)
 8001d7a:	1ba4      	subs	r4, r4, r6
 8001d7c:	10a4      	asrs	r4, r4, #2
 8001d7e:	2500      	movs	r5, #0
 8001d80:	42a5      	cmp	r5, r4
 8001d82:	d109      	bne.n	8001d98 <__libc_init_array+0x24>
 8001d84:	4e0b      	ldr	r6, [pc, #44]	; (8001db4 <__libc_init_array+0x40>)
 8001d86:	4c0c      	ldr	r4, [pc, #48]	; (8001db8 <__libc_init_array+0x44>)
 8001d88:	f000 f818 	bl	8001dbc <_init>
 8001d8c:	1ba4      	subs	r4, r4, r6
 8001d8e:	10a4      	asrs	r4, r4, #2
 8001d90:	2500      	movs	r5, #0
 8001d92:	42a5      	cmp	r5, r4
 8001d94:	d105      	bne.n	8001da2 <__libc_init_array+0x2e>
 8001d96:	bd70      	pop	{r4, r5, r6, pc}
 8001d98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d9c:	4798      	blx	r3
 8001d9e:	3501      	adds	r5, #1
 8001da0:	e7ee      	b.n	8001d80 <__libc_init_array+0xc>
 8001da2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001da6:	4798      	blx	r3
 8001da8:	3501      	adds	r5, #1
 8001daa:	e7f2      	b.n	8001d92 <__libc_init_array+0x1e>
 8001dac:	08001dfc 	.word	0x08001dfc
 8001db0:	08001dfc 	.word	0x08001dfc
 8001db4:	08001dfc 	.word	0x08001dfc
 8001db8:	08001e00 	.word	0x08001e00

08001dbc <_init>:
 8001dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dbe:	bf00      	nop
 8001dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dc2:	bc08      	pop	{r3}
 8001dc4:	469e      	mov	lr, r3
 8001dc6:	4770      	bx	lr

08001dc8 <_fini>:
 8001dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dca:	bf00      	nop
 8001dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dce:	bc08      	pop	{r3}
 8001dd0:	469e      	mov	lr, r3
 8001dd2:	4770      	bx	lr
